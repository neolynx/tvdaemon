From fa5a74c9d3b5528cd6902539353a91692f19d895 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Roth?= <neolynx@gmail.com>
Date: Sat, 5 Apr 2014 13:06:44 +0200
Subject: [PATCH 11/11] generators: adding calcsize and store

---
 lib/include/libdvbv5/desc_service.h     |   3 +
 lib/include/libdvbv5/descriptors.h      |  11 +++
 lib/include/libdvbv5/sdt.h              |   4 ++
 lib/libdvbv5/descriptors.c              |  80 +++++++++++++++++++---
 lib/libdvbv5/descriptors/desc_service.c |  64 ++++++++++++++++++
 lib/libdvbv5/descriptors/sdt.c          | 115 +++++++++++++++++++++++++++++++-
 lib/libdvbv5/parse_string.c             |   7 +-
 lib/libdvbv5/parse_string.h             |   2 +-
 8 files changed, 272 insertions(+), 14 deletions(-)

diff --git a/lib/include/libdvbv5/desc_service.h b/lib/include/libdvbv5/desc_service.h
index da4423c..c6dac33 100644
--- a/lib/include/libdvbv5/desc_service.h
+++ b/lib/include/libdvbv5/desc_service.h
@@ -42,6 +42,9 @@ extern "C" {
 
 int dvb_desc_service_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, struct dvb_desc *desc);
 void dvb_desc_service_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
+struct dvb_desc *dvb_desc_service_create();
+void dvb_desc_service_calcsize(struct dvb_desc *desc);
+void dvb_desc_service_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data);
 void dvb_desc_service_free (struct dvb_desc *desc);
 
 #ifdef __cplusplus
diff --git a/lib/include/libdvbv5/descriptors.h b/lib/include/libdvbv5/descriptors.h
index 35e2277..6452c68 100644
--- a/lib/include/libdvbv5/descriptors.h
+++ b/lib/include/libdvbv5/descriptors.h
@@ -54,6 +54,8 @@ extern char *output_charset;
 	b = ntohl(b); \
 } while (0)
 
+#define DVB_DESC_HEADER_SIZE 2
+
 #define DVB_DESC_HEADER() \
 	uint8_t type; \
 	uint8_t length; \
@@ -84,6 +86,9 @@ void hexdump(struct dvb_v5_fe_parms *parms, const char *prefix, const unsigned c
 int dvb_parse_descriptors(struct dvb_v5_fe_parms *parms, const uint8_t *buf, uint16_t section_length, struct dvb_desc **head_desc);
 void dvb_free_descriptors(struct dvb_desc **list);
 void dvb_desc_print(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc);
+struct dvb_desc *dvb_desc_create(struct dvb_v5_fe_parms *parms, uint8_t type, struct dvb_desc **list);
+ssize_t dvb_desc_calcsize(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc);
+int dvb_desc_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data);
 
 #ifdef __cplusplus
 }
@@ -94,12 +99,18 @@ struct dvb_v5_fe_parms;
 typedef int (*dvb_desc_init_func) (struct dvb_v5_fe_parms *parms, const uint8_t *buf, struct dvb_desc *desc);
 typedef void (*dvb_desc_print_func)(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
 typedef void (*dvb_desc_free_func) (struct dvb_desc *desc);
+typedef void (*dvb_desc_calcsize_func) (struct dvb_desc *desc);
+typedef void (*dvb_desc_store_func) (struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data);
+typedef struct dvb_desc *(*dvb_desc_create_func) ();
 
 struct dvb_descriptor {
 	const char *name;
 	dvb_desc_init_func init;
 	dvb_desc_print_func print;
 	dvb_desc_free_func free;
+	dvb_desc_calcsize_func calcsize;
+	dvb_desc_create_func create;
+	dvb_desc_store_func store;
 	ssize_t size;
 };
 
diff --git a/lib/include/libdvbv5/sdt.h b/lib/include/libdvbv5/sdt.h
index 9684fbc..dd25ff9 100644
--- a/lib/include/libdvbv5/sdt.h
+++ b/lib/include/libdvbv5/sdt.h
@@ -67,6 +67,10 @@ extern "C" {
 ssize_t dvb_table_sdt_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, ssize_t buflen, struct dvb_table_sdt *sdt, ssize_t *table_lengh);
 void dvb_table_sdt_free(struct dvb_table_sdt *sdt);
 void dvb_table_sdt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sdt);
+struct dvb_table_sdt *dvb_table_sdt_create();
+struct dvb_table_sdt_service *dvb_table_sdt_service_create(struct dvb_table_sdt *sdt, uint16_t service_id);
+ssize_t dvb_table_sdt_calcsize(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sdt);
+ssize_t dvb_table_sdt_store(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sdt, uint8_t **data);
 
 #ifdef __cplusplus
 }
diff --git a/lib/libdvbv5/descriptors.c b/lib/libdvbv5/descriptors.c
index d932a0b..f02347c 100644
--- a/lib/libdvbv5/descriptors.c
+++ b/lib/libdvbv5/descriptors.c
@@ -59,6 +59,27 @@
 #include <libdvbv5/desc_ca_identifier.h>
 #include <libdvbv5/desc_extension.h>
 
+struct dvb_desc *dvb_desc_create(struct dvb_v5_fe_parms *parms, uint8_t type, struct dvb_desc **list)
+{
+	dvb_desc_create_func create = dvb_descriptors[type].create;
+	struct dvb_desc **head = list;
+
+	if (!create) {
+		dvb_logerr("no generator found for %s (0x%02x)",
+				dvb_descriptors[type].name, type);
+		return NULL;
+	}
+
+	/* append to the list */
+	while (*head != NULL)
+		head = &(*head)->next;
+
+	 *head = create();
+	 (*head)->next = NULL;
+	 return *head;
+
+}
+
 static void dvb_desc_init(uint8_t type, uint8_t length, struct dvb_desc *desc)
 {
 	desc->type   = type;
@@ -184,6 +205,39 @@ void dvb_desc_print(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc)
 	}
 }
 
+ssize_t dvb_desc_calcsize(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc)
+{
+	ssize_t size = 0;
+	while (desc) {
+		dvb_desc_calcsize_func calcsize = dvb_descriptors[desc->type].calcsize;
+		if (!calcsize) {
+			dvb_logerr("%s: no calcsize function defined for %s (0x%02x)",
+				__func__, dvb_descriptors[desc->type].name, desc->type);
+			return -1;
+		}
+		calcsize(desc);
+		size += DVB_DESC_HEADER_SIZE;
+		size += desc->length;
+		desc = desc->next;
+	}
+	return size;
+}
+
+int dvb_desc_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data)
+{
+	ssize_t size = 0;
+	while (desc) {
+		dvb_desc_store_func store = dvb_descriptors[desc->type].store;
+		if (!store) {
+			return -1;
+		}
+		store(parms, desc, data);
+		size += desc->length + 2 /* plus desc header */;
+		desc = desc->next;
+	}
+	return size;
+}
+
 void dvb_free_descriptors(struct dvb_desc **list)
 {
 	struct dvb_desc *desc = *list;
@@ -199,11 +253,14 @@ void dvb_free_descriptors(struct dvb_desc **list)
 
 const struct dvb_descriptor dvb_descriptors[] = {
 	[0 ...255 ] = {
-		.name  = "Unknown descriptor",
-		.init  = NULL,
-		.print = NULL,
-		.free  = NULL,
-		.size  = 0,
+		.name      = "Unknown descriptor",
+		.init      = NULL,
+		.print     = NULL,
+		.free      = NULL,
+		.calcsize  = NULL,
+		.create    = NULL,
+		.store     = NULL,
+		.size      = 0,
 	},
 	[video_stream_descriptor] = {
 		.name  = "video_stream_descriptor",
@@ -507,11 +564,14 @@ const struct dvb_descriptor dvb_descriptors[] = {
 		.size  = 0,
 	},
 	[service_descriptor] = {
-		.name  = "service_descriptor",
-		.init  = dvb_desc_service_init,
-		.print = dvb_desc_service_print,
-		.free  = dvb_desc_service_free,
-		.size  = sizeof(struct dvb_desc_service),
+		.name     = "service_descriptor",
+		.init     = dvb_desc_service_init,
+		.print    = dvb_desc_service_print,
+		.free     = dvb_desc_service_free,
+		.calcsize = dvb_desc_service_calcsize,
+		.create   = dvb_desc_service_create,
+		.store    = dvb_desc_service_store,
+		.size     = sizeof(struct dvb_desc_service),
 	},
 	[country_availability_descriptor] = {
 		.name  = "country_availability_descriptor",
diff --git a/lib/libdvbv5/descriptors/desc_service.c b/lib/libdvbv5/descriptors/desc_service.c
index 983fd74..9564eab 100644
--- a/lib/libdvbv5/descriptors/desc_service.c
+++ b/lib/libdvbv5/descriptors/desc_service.c
@@ -99,3 +99,67 @@ void dvb_desc_service_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc
 	dvb_loginfo("|           name          '%s'", service->name);
 }
 
+struct dvb_desc *dvb_desc_service_create()
+{
+	  struct dvb_desc_service *desc = calloc( sizeof( struct dvb_desc_service ), 1 );
+	  desc->type = service_descriptor;
+	  return (struct dvb_desc *) desc;
+}
+
+void dvb_desc_service_calcsize(struct dvb_desc *desc)
+{
+	const struct dvb_desc_service *service = (const struct dvb_desc_service *) desc;
+
+	desc->length = 3; /* 3 header bytes */
+
+	/* FIXME: use iconv size */
+	if (service->provider) {
+		desc->length += strlen(service->provider);
+	}
+
+	if (service->name)
+		desc->length += strlen(service->name);
+}
+
+void dvb_desc_service_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data)
+{
+	const struct dvb_desc_service *service = (const struct dvb_desc_service *) desc;
+	data[0] = desc->type;
+	data[1] = desc->length;
+	uint8_t *p = data + 2;
+
+	*p++ = service->service_type;
+
+	if (service->provider) {
+		int len = strlen(service->provider);
+		int buflen = len * 3;
+		char *buf = malloc(buflen);
+		iconv_to_charset(parms, buf, buflen,  (const unsigned char *) service->provider, len, "utf-8", default_charset);
+		int len2 = strlen(buf);
+		if (len2) {
+			*p++ = len2;
+			memcpy(p, buf, len2);
+			p += len2;
+		}
+		free(buf);
+	} else {
+		*p++ = 0;
+	}
+
+	if (service->name) {
+		int len = strlen(service->name);
+		int buflen = len * 3;
+		char *buf = malloc(buflen);
+		iconv_to_charset(parms, buf, buflen, (const unsigned char *) service->name, len, "utf-8", default_charset);
+		int len2 = strlen(buf);
+		if (len2) {
+			*p++ = len2;
+			memcpy(p, buf, len2);
+			p += len2;
+		}
+		free(buf);
+	} else {
+		*p++ = 0;
+	}
+}
+
diff --git a/lib/libdvbv5/descriptors/sdt.c b/lib/libdvbv5/descriptors/sdt.c
index 820e092..42739a4 100644
--- a/lib/libdvbv5/descriptors/sdt.c
+++ b/lib/libdvbv5/descriptors/sdt.c
@@ -22,6 +22,8 @@
 #include <libdvbv5/sdt.h>
 #include <libdvbv5/descriptors.h>
 #include <libdvbv5/dvb-fe.h>
+#include <libdvbv5/mpeg_ts.h>
+#include <libdvbv5/crc32.h>
 
 ssize_t dvb_table_sdt_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
 			ssize_t buflen, struct dvb_table_sdt *sdt, ssize_t *table_length)
@@ -107,7 +109,7 @@ ssize_t dvb_table_sdt_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
 void dvb_table_sdt_free(struct dvb_table_sdt *sdt)
 {
 	struct dvb_table_sdt_service *service = sdt->service;
-	while(service) {
+	while (service) {
 		dvb_free_descriptors((struct dvb_desc **) &service->descriptor);
 		struct dvb_table_sdt_service *tmp = service;
 		service = service->next;
@@ -139,3 +141,114 @@ void dvb_table_sdt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sd
 	dvb_loginfo("|_  %d services", services);
 }
 
+struct dvb_table_sdt *dvb_table_sdt_create()
+{
+	struct dvb_table_sdt *sdt = calloc( sizeof( struct dvb_table_sdt ), 1 );
+	sdt->header.table_id = DVB_TABLE_SDT;
+	sdt->header.one = 3;
+	sdt->header.zero = 1;
+	sdt->header.syntax = 1;
+	sdt->header.current_next = 1;
+	sdt->header.id = 1;
+	sdt->header.current_next = 1;
+	sdt->header.version = 0;
+	sdt->header.one2 = 3;
+	sdt->header.section_id = 0;
+	sdt->header.last_section = 0;
+
+	sdt->network_id = 1;
+	sdt->reserved = 255;
+	return sdt;
+}
+
+struct dvb_table_sdt_service *dvb_table_sdt_service_create(struct dvb_table_sdt *sdt, uint16_t service_id)
+{
+	struct dvb_table_sdt_service **head = &sdt->service;
+
+	/* append to the list */
+	while (*head != NULL)
+		head = &(*head)->next;
+	*head = calloc( sizeof( struct dvb_table_sdt_service ), 1 );
+	(*head)->service_id = service_id;
+	(*head)->running_status = 4;
+	return *head;
+}
+
+ssize_t dvb_table_sdt_store(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sdt, uint8_t **data)
+{
+	ssize_t size_total = offsetof(struct dvb_table_sdt, service);
+	struct dvb_table_sdt_service *service = sdt->service;
+
+	*data = NULL;
+	while (service) {
+		ssize_t desc_size;
+
+		size_total += offsetof(struct dvb_table_sdt_service, descriptor);
+		desc_size = dvb_desc_calcsize(parms, service->descriptor);
+		if (desc_size < 0)
+			return -1;
+		service->desc_length = desc_size;
+		size_total += desc_size;
+		service = service->next;
+	}
+
+	size_total += 4; /* CRC */
+	sdt->header.section_length = size_total - offsetof(struct dvb_table_header, id);
+
+	dvb_loginfo( "section length %d bytes", sdt->header.section_length);
+
+	int mpeg_headers = (size_total / 183) + 1;
+	dvb_loginfo( "need %d mpeg headers", mpeg_headers);
+	size_total += mpeg_headers * 5;
+
+	dvb_loginfo( "allocating %zd bytes", size_total);
+	*data = malloc( size_total );
+	uint8_t *p = *data;
+	dvb_log( "p base %p", p );
+
+	bswap16(sdt->header.bitfield);
+	bswap16(sdt->network_id);
+
+	ssize_t size = 5;
+	struct dvb_mpeg_ts *ts = (struct dvb_mpeg_ts *) *data;
+	ts->sync_byte = DVB_MPEG_TS;
+	ts->pid = DVB_TABLE_SDT_PID;
+	ts->payload_start = 1;
+	ts->payload = 1;
+	bswap16(ts->bitfield);
+	p += size;
+	dvb_log( "p mpeg %p", p );
+
+	size = offsetof(struct dvb_table_sdt, service);
+	memcpy(p, sdt, size);
+	p += size;
+	dvb_log( "p sdt  %p", p );
+
+	service = sdt->service;
+	while (service) {
+		size = offsetof(struct dvb_table_sdt_service, descriptor);
+
+		bswap16(service->service_id);
+		bswap16(service->bitfield);
+
+		memcpy(p, service, size);
+		p += size;
+		dvb_log( "p srvc %p", p );
+
+		p += dvb_desc_store(parms, service->descriptor, p);
+		dvb_log( "p desc %p", p );
+
+		service = service->next;
+	}
+
+
+	*(uint32_t *) p = 0xFFFFFFFF;
+	*(uint32_t *) p = 0x00000000;
+	hexdump( parms, "crc ", *data + 5, size_total - 5 );
+	uint32_t crc = crc32(*data + 5, size_total - 5, 0xFFFFFFFF);
+	dvb_loginfo( "crc: %04x", crc );
+	bswap32(crc);
+	*(uint32_t *) p = crc;
+
+	return size_total;
+}
diff --git a/lib/libdvbv5/parse_string.c b/lib/libdvbv5/parse_string.c
index 0e94cf2..0fd2a54 100644
--- a/lib/libdvbv5/parse_string.c
+++ b/lib/libdvbv5/parse_string.c
@@ -300,7 +300,7 @@ static struct charset_conv en300468_latin_00_to_utf8[256] = {
 	[0xff] = { 2, {0xc2, 0xad, } },
 };
 
-void iconv_to_charset(struct dvb_v5_fe_parms *parms,
+size_t iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		      char *dest,
 		      size_t destlen,
 		      const unsigned char *src,
@@ -317,6 +317,7 @@ void iconv_to_charset(struct dvb_v5_fe_parms *parms,
 	if (cd == (iconv_t)(-1)) {
 		memcpy(p, src, len);
 		p[len] = '\0';
+		destlen = len;
 		dvb_logerr("Conversion from %s to %s not supported\n",
 				type, output_charset);
 	} else {
@@ -324,6 +325,7 @@ void iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		iconv_close(cd);
 		*p = '\0';
 	}
+	return destlen;
 }
 
 static void charset_conversion(struct dvb_v5_fe_parms *parms, char **dest, const unsigned char *s,
@@ -362,8 +364,9 @@ static void charset_conversion(struct dvb_v5_fe_parms *parms, char **dest, const
 
 	/* Convert from original charset to the desired one */
 	if (need_conversion)
-		iconv_to_charset(parms, *dest, destlen, s, len, type,
+		destlen = iconv_to_charset(parms, *dest, destlen, s, len, type,
 				 output_charset);
+	/* FIXME: do something with destlen */
 }
 
 void parse_string(struct dvb_v5_fe_parms *parms, char **dest, char **emph,
diff --git a/lib/libdvbv5/parse_string.h b/lib/libdvbv5/parse_string.h
index 61d0ed4..4d838d0 100644
--- a/lib/libdvbv5/parse_string.h
+++ b/lib/libdvbv5/parse_string.h
@@ -19,7 +19,7 @@
 
 struct dvb_v5_fe_parms;
 
-void iconv_to_charset(struct dvb_v5_fe_parms *parms,
+size_t iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		      char *dest,
 		      size_t destlen,
 		      const unsigned char *src,
-- 
1.9.1

