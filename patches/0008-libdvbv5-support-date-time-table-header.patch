From a12e57d14e39703d5c2fe352c4ae00dfacf30456 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Roth?= <neolynx@gmail.com>
Date: Mon, 17 Nov 2014 20:44:52 +0100
Subject: [PATCH 08/12] libdvbv5: support date/time table header
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Andr√© Roth <neolynx@gmail.com>
---
 lib/include/libdvbv5/descriptors.h | 17 +++++++++++-
 lib/include/libdvbv5/header.h      | 57 ++++++++++++++++++++++++++++++++++++++
 lib/libdvbv5/descriptors.c         | 34 +++++++++++++++++++++++
 lib/libdvbv5/tables/header.c       | 15 ++++++++++
 4 files changed, 122 insertions(+), 1 deletion(-)

diff --git a/lib/include/libdvbv5/descriptors.h b/lib/include/libdvbv5/descriptors.h
index e22ec96..05dc0ef 100644
--- a/lib/include/libdvbv5/descriptors.h
+++ b/lib/include/libdvbv5/descriptors.h
@@ -164,7 +164,7 @@ typedef int (*dvb_table_parse_func)(struct dvb_v5_fe_parms_priv *priv,
 			     const uint8_t *buf, ssize_t buf_length);
 
 /**
- * @brief Parses a DVB table and descriptors
+ * @brief Parses a DVB table and descriptors with standard header
  * @ingroup dvb_table
  *
  * @param priv		Private parser data
@@ -192,6 +192,21 @@ struct dvb_initializer {
 };
 
 /**
+ * @brief Parses a DVB table and descriptors with date/time header
+ * @ingroup dvb_table
+ *
+ * @param priv		Private parser data
+ * @param sect		Pointer to filter data
+ * @param buf		Buffer with data to be parsed
+ * @param buflen	Size of the buffer to be parsed
+ *
+ * @return		Returns 0 on success, a negative value otherwise
+ */
+int dvb_parse_section_datetime(struct dvb_v5_fe_parms_priv *priv,
+			     struct dvb_table_filter *sect,
+			     const uint8_t *buf, ssize_t buf_length);
+
+/**
  * @brief Table with all possible descriptors
  * @ingroup dvb_table
  */
diff --git a/lib/include/libdvbv5/header.h b/lib/include/libdvbv5/header.h
index cb528e6..5e42f5d 100644
--- a/lib/include/libdvbv5/header.h
+++ b/lib/include/libdvbv5/header.h
@@ -110,6 +110,43 @@ struct dvb_table_header {
 	uint8_t  last_section;		/* last_section_number */
 } __attribute__((packed));
 
+/**
+ * @struct dvb_table_header_datetime
+ * @brief Header of a MPEG-TS date/time table (TDT, TOT)
+ * @ingroup dvb_table
+ *
+ * @param table_id		table id
+ * @param syntax		syntax
+ * @param one1			0x01
+ * @param one2			0x03
+ * @param time			UTC time
+ * @param desc_length		size of descriptors
+ *
+ * All MPEG-TS tables start with this header.
+ */
+struct dvb_table_header_datetime {
+	uint8_t  table_id;
+	union {
+		uint16_t bitfield1;
+		struct {
+			uint16_t section_length:12;
+			uint8_t  one2:2;
+			uint8_t  one:1;
+			uint8_t  syntax:1;
+		} __attribute__((packed));
+	} __attribute__((packed));
+	union {
+		uint16_t bitfield2; /* first 2 bytes are MJD, they need to be bswapped */
+		uint8_t time[5];
+	} __attribute__((packed));
+	union {
+		uint16_t bitfield3;
+		struct {
+			uint16_t desc_length:12;
+			uint16_t reserved:4;
+		} __attribute__((packed));
+	} __attribute__((packed));
+} __attribute__((packed));
 struct dvb_v5_fe_parms;
 
 #ifdef __cplusplus
@@ -123,6 +160,7 @@ extern "C" {
  * @param header pointer to struct dvb_table_header to be parsed
  */
 void dvb_table_header_init (struct dvb_table_header *header);
+
 /**
  * @brief Prints the content of the MPEG-TS table header
  * @ingroup dvb_table
@@ -133,6 +171,25 @@ void dvb_table_header_init (struct dvb_table_header *header);
 void dvb_table_header_print(struct dvb_v5_fe_parms *parms,
 			    const struct dvb_table_header *header);
 
+/**
+ * @brief Initializes and parses MPEG-TS date/time table header
+ * @ingroup dvb_table
+ *
+ * @param header pointer to struct dvb_table_header_datetime to be parsed
+ */
+void dvb_table_header_datetime_init(struct dvb_table_header_datetime
+				    *header);
+
+/**
+ * @brief Prints the content of the MPEG-TS date/time table header
+ * @ingroup dvb_table
+ *
+ * @param parms	struct dvb_v5_fe_parms pointer to the opened device
+ * @param header pointer to struct dvb_table_header_datetime to be printed
+ */
+void dvb_table_header_datetime_print(struct dvb_v5_fe_parms *parms,
+			    const struct dvb_table_header_datetime *header);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/libdvbv5/descriptors.c b/lib/libdvbv5/descriptors.c
index 0a6e072..b3915f1 100644
--- a/lib/libdvbv5/descriptors.c
+++ b/lib/libdvbv5/descriptors.c
@@ -222,6 +222,40 @@ int dvb_parse_section(struct dvb_v5_fe_parms_priv *priv,
 	return 1;
 }
 
+int dvb_parse_section_datetime(struct dvb_v5_fe_parms_priv *priv,
+			     struct dvb_table_filter *sect,
+			     const uint8_t *buf, ssize_t buf_length)
+{
+	struct dvb_table_header_datetime h;
+	unsigned char tid;
+	struct dvb_v5_fe_parms *parms = &priv->p;
+
+	memcpy(&h, buf, sizeof(struct dvb_table_header));
+	dvb_table_header_datetime_init(&h);
+
+	if (priv->p.verbose)
+		dvb_log("%s: received table 0x%02x",
+			__func__, h.table_id);
+
+	if (sect->tid != h.table_id) {
+		dvb_logdbg("%s: couldn't match ID %d at the active section filters",
+			   __func__, h.table_id);
+		return -1;
+	}
+	tid = h.table_id;
+
+	if (dvb_table_initializers[tid].init)
+		dvb_table_initializers[tid].init(parms, buf,
+					    buf_length - DVB_CRC_SIZE,
+					    sect->table);
+	else
+		dvb_logerr("%s: no initializer for table %d",
+			   __func__, tid);
+
+	/* Section was fully parsed */
+	return 1;
+}
+
 int dvb_desc_parse(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
 			   uint16_t buflen, struct dvb_desc **head_desc)
 {
diff --git a/lib/libdvbv5/tables/header.c b/lib/libdvbv5/tables/header.c
index 14b2372..d85297a 100644
--- a/lib/libdvbv5/tables/header.c
+++ b/lib/libdvbv5/tables/header.c
@@ -44,3 +44,18 @@ void dvb_table_header_print(struct dvb_v5_fe_parms *parms, const struct dvb_tabl
 	dvb_loginfo("| last_section_number %d", t->last_section);
 }
 
+void dvb_table_header_datetime_init(struct dvb_table_header_datetime *t)
+{
+	bswap16(t->bitfield1);
+	bswap16(t->bitfield2);
+	bswap16(t->bitfield3);
+}
+
+void dvb_table_header_datetime_print(struct dvb_v5_fe_parms *parms, const struct dvb_table_header_datetime *t)
+{
+	dvb_loginfo("| table_id         0x%02x", t->table_id);
+	dvb_loginfo("| syntax              %d", t->syntax);
+	dvb_loginfo("| one                 %d", t->one);
+	dvb_loginfo("| one2                %d", t->one2);
+	dvb_loginfo("| desc_length         %d", t->desc_length);
+}
-- 
1.8.3.2

