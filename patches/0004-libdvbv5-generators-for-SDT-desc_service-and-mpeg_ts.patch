From 82f0cf87422e033e871eeb52ac37d8f408c38e9d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Roth?= <neolynx@gmail.com>
Date: Thu, 17 Apr 2014 16:25:37 +0200
Subject: [PATCH 4/5] libdvbv5: generators for SDT, desc_service and mpeg_ts
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

this allows to create an SDT table with a service descriptor
enclosed in mpeg transport stream.

Example usage:

  struct dvb_table_sdt *sdt = dvb_table_sdt_create( );
  struct dvb_table_sdt_service *service = dvb_table_sdt_service_create( sdt, 0x0001 );

  struct dvb_desc_service *desc = (struct dvb_desc_service *) dvb_desc_create( fe, 0x48, &service->descriptor );
  desc->service_type = 0x1;
  desc->provider = strdup( "libdvbv5" );
  desc->name = strdup( "Service01" );

  uint8_t *data;
  ssize_t size = dvb_table_sdt_store( fe, sdt, &data );
  dvb_table_sdt_free( sdt );

  uint8_t *mpegts;
  size = dvb_mpeg_ts_create( fe, data, size, &mpegts, DVB_TABLE_SDT_PID, 0 );
  free( data );
  write( fd, mpegts, size );
  free( mpegts );

Signed-off-by: Andr√© Roth <neolynx@gmail.com>
---
 lib/include/libdvbv5/desc_service.h     |   2 +
 lib/include/libdvbv5/descriptors.h      |   8 +++
 lib/include/libdvbv5/mpeg_ts.h          |   6 +-
 lib/include/libdvbv5/sdt.h              |   4 ++
 lib/libdvbv5/descriptors.c              |  59 ++++++++++++++---
 lib/libdvbv5/descriptors/desc_service.c |  52 +++++++++++++++
 lib/libdvbv5/parse_string.c             |   7 +-
 lib/libdvbv5/parse_string.h             |   2 +-
 lib/libdvbv5/tables/mpeg_ts.c           | 112 +++++++++++++++++++++++++++-----
 lib/libdvbv5/tables/sdt.c               |  85 +++++++++++++++++++++++-
 10 files changed, 303 insertions(+), 34 deletions(-)

diff --git a/lib/include/libdvbv5/desc_service.h b/lib/include/libdvbv5/desc_service.h
index da4423c..60ddc90 100644
--- a/lib/include/libdvbv5/desc_service.h
+++ b/lib/include/libdvbv5/desc_service.h
@@ -42,6 +42,8 @@ extern "C" {
 
 int dvb_desc_service_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, struct dvb_desc *desc);
 void dvb_desc_service_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
+struct dvb_desc *dvb_desc_service_create();
+ssize_t dvb_desc_service_store(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc, uint8_t *data);
 void dvb_desc_service_free (struct dvb_desc *desc);
 
 #ifdef __cplusplus
diff --git a/lib/include/libdvbv5/descriptors.h b/lib/include/libdvbv5/descriptors.h
index 94d85a9..54a2918 100644
--- a/lib/include/libdvbv5/descriptors.h
+++ b/lib/include/libdvbv5/descriptors.h
@@ -49,6 +49,8 @@ extern char *output_charset;
 	b = ntohl(b); \
 } while (0)
 
+#define DVB_DESC_HEADER_SIZE 2
+
 #define DVB_DESC_HEADER() \
 	uint8_t type; \
 	uint8_t length; \
@@ -79,6 +81,8 @@ void hexdump(struct dvb_v5_fe_parms *parms, const char *prefix, const unsigned c
 int  dvb_desc_parse(struct dvb_v5_fe_parms *parms, const uint8_t *buf, uint16_t section_length, struct dvb_desc **head_desc);
 void dvb_desc_free (struct dvb_desc **list);
 void dvb_desc_print(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc);
+struct dvb_desc *dvb_desc_create(struct dvb_v5_fe_parms *parms, uint8_t type, struct dvb_desc **list);
+ssize_t dvb_desc_store(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc, uint8_t *data);
 
 #ifdef __cplusplus
 }
@@ -89,12 +93,16 @@ struct dvb_v5_fe_parms;
 typedef int (*dvb_desc_init_func) (struct dvb_v5_fe_parms *parms, const uint8_t *buf, struct dvb_desc *desc);
 typedef void (*dvb_desc_print_func)(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
 typedef void (*dvb_desc_free_func) (struct dvb_desc *desc);
+typedef ssize_t (*dvb_desc_store_func) (struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc, uint8_t *data);
+typedef struct dvb_desc *(*dvb_desc_create_func) ();
 
 struct dvb_descriptor {
 	const char *name;
 	dvb_desc_init_func init;
 	dvb_desc_print_func print;
 	dvb_desc_free_func free;
+	dvb_desc_create_func create;
+	dvb_desc_store_func store;
 	ssize_t size;
 };
 
diff --git a/lib/include/libdvbv5/mpeg_ts.h b/lib/include/libdvbv5/mpeg_ts.h
index 3eab029..d17793d 100644
--- a/lib/include/libdvbv5/mpeg_ts.h
+++ b/lib/include/libdvbv5/mpeg_ts.h
@@ -68,10 +68,12 @@ struct dvb_v5_fe_parms;
 extern "C" {
 #endif
 
-ssize_t dvb_mpeg_ts_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, ssize_t buflen, uint8_t *table, ssize_t *table_length);
+ssize_t dvb_mpeg_ts_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, ssize_t buflen,
+		uint8_t *table, ssize_t *table_length);
 void dvb_mpeg_ts_free(struct dvb_mpeg_ts *ts);
 void dvb_mpeg_ts_print(struct dvb_v5_fe_parms *parms, struct dvb_mpeg_ts *ts);
-
+ssize_t dvb_mpeg_ts_create(struct dvb_v5_fe_parms *parms, uint8_t *buf, ssize_t buflen,
+		uint8_t **data, uint16_t pid, int padding);
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/include/libdvbv5/sdt.h b/lib/include/libdvbv5/sdt.h
index 8455080..993c5f3 100644
--- a/lib/include/libdvbv5/sdt.h
+++ b/lib/include/libdvbv5/sdt.h
@@ -67,6 +67,10 @@ extern "C" {
 ssize_t dvb_table_sdt_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, ssize_t buflen, struct dvb_table_sdt **table);
 void dvb_table_sdt_free(struct dvb_table_sdt *sdt);
 void dvb_table_sdt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sdt);
+struct dvb_table_sdt *dvb_table_sdt_create();
+struct dvb_table_sdt_service *dvb_table_sdt_service_create(struct dvb_table_sdt *sdt, uint16_t service_id);
+ssize_t dvb_table_sdt_calcsize(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sdt);
+ssize_t dvb_table_sdt_store(struct dvb_v5_fe_parms *parms, const struct dvb_table_sdt *sdt, uint8_t **data);
 
 #ifdef __cplusplus
 }
diff --git a/lib/libdvbv5/descriptors.c b/lib/libdvbv5/descriptors.c
index 1b51962..423f3eb 100644
--- a/lib/libdvbv5/descriptors.c
+++ b/lib/libdvbv5/descriptors.c
@@ -59,6 +59,27 @@
 #include <libdvbv5/desc_ca_identifier.h>
 #include <libdvbv5/desc_extension.h>
 
+struct dvb_desc *dvb_desc_create(struct dvb_v5_fe_parms *parms, uint8_t type, struct dvb_desc **list)
+{
+	dvb_desc_create_func create = dvb_descriptors[type].create;
+	struct dvb_desc **head = list;
+
+	if (!create) {
+		dvb_logerr("no generator found for %s (0x%02x)",
+				dvb_descriptors[type].name, type);
+		return NULL;
+	}
+
+	/* append to the list */
+	while (*head != NULL)
+		head = &(*head)->next;
+
+	 *head = create();
+	 (*head)->next = NULL;
+	 return *head;
+
+}
+
 static void dvb_desc_init(uint8_t type, uint8_t length, struct dvb_desc *desc)
 {
 	desc->type   = type;
@@ -198,13 +219,29 @@ void dvb_desc_free(struct dvb_desc **list)
 	*list = NULL;
 }
 
+ssize_t dvb_desc_store(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc, uint8_t *data)
+{
+	ssize_t size = 0;
+	while (desc) {
+		dvb_desc_store_func store = dvb_descriptors[desc->type].store;
+		if (!store) {
+			return -1;
+		}
+		size += store(parms, desc, data);
+		desc = desc->next;
+	}
+	return size;
+}
+
 const struct dvb_descriptor dvb_descriptors[] = {
 	[0 ...255 ] = {
-		.name  = "Unknown descriptor",
-		.init  = NULL,
-		.print = NULL,
-		.free  = NULL,
-		.size  = 0,
+		.name      = "Unknown descriptor",
+		.init      = NULL,
+		.print     = NULL,
+		.free      = NULL,
+		.create    = NULL,
+		.store     = NULL,
+		.size      = 0,
 	},
 	[video_stream_descriptor] = {
 		.name  = "video_stream_descriptor",
@@ -508,11 +545,13 @@ const struct dvb_descriptor dvb_descriptors[] = {
 		.size  = 0,
 	},
 	[service_descriptor] = {
-		.name  = "service_descriptor",
-		.init  = dvb_desc_service_init,
-		.print = dvb_desc_service_print,
-		.free  = dvb_desc_service_free,
-		.size  = sizeof(struct dvb_desc_service),
+		.name     = "service_descriptor",
+		.init     = dvb_desc_service_init,
+		.print    = dvb_desc_service_print,
+		.free     = dvb_desc_service_free,
+		.create   = dvb_desc_service_create,
+		.store    = dvb_desc_service_store,
+		.size     = sizeof(struct dvb_desc_service),
 	},
 	[country_availability_descriptor] = {
 		.name  = "country_availability_descriptor",
diff --git a/lib/libdvbv5/descriptors/desc_service.c b/lib/libdvbv5/descriptors/desc_service.c
index 983fd74..b96fb47 100644
--- a/lib/libdvbv5/descriptors/desc_service.c
+++ b/lib/libdvbv5/descriptors/desc_service.c
@@ -99,3 +99,55 @@ void dvb_desc_service_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc
 	dvb_loginfo("|           name          '%s'", service->name);
 }
 
+struct dvb_desc *dvb_desc_service_create()
+{
+	  struct dvb_desc_service *desc = calloc( sizeof( struct dvb_desc_service ), 1 );
+	  desc->type = service_descriptor;
+	  return (struct dvb_desc *) desc;
+}
+
+ssize_t dvb_desc_service_store(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc, uint8_t *data)
+{
+	const struct dvb_desc_service *service = (const struct dvb_desc_service *) desc;
+	data[0] = desc->type;
+	uint8_t *p = data + 2;
+
+	*p++ = service->service_type;
+
+	if (service->provider) {
+		int len = strlen(service->provider);
+		int buflen = len * 3;
+		char *buf = malloc(buflen);
+		iconv_to_charset(parms, buf, buflen,  (const unsigned char *) service->provider, len, "utf-8", default_charset);
+		int len2 = strlen(buf);
+		if (len2) {
+			*p++ = len2;
+			memcpy(p, buf, len2);
+			p += len2;
+		}
+		free(buf);
+	} else {
+		*p++ = 0;
+	}
+
+	if (service->name) {
+		int len = strlen(service->name);
+		int buflen = len * 3;
+		char *buf = malloc(buflen);
+		iconv_to_charset(parms, buf, buflen, (const unsigned char *) service->name, len, "utf-8", default_charset);
+		int len2 = strlen(buf);
+		if (len2) {
+			*p++ = len2;
+			memcpy(p, buf, len2);
+			p += len2;
+		}
+		free(buf);
+	} else {
+		*p++ = 0;
+	}
+
+	/* set descriptor length */
+	data[1] = p - data - 2;
+	return p - data;
+}
+
diff --git a/lib/libdvbv5/parse_string.c b/lib/libdvbv5/parse_string.c
index 0e94cf2..0fd2a54 100644
--- a/lib/libdvbv5/parse_string.c
+++ b/lib/libdvbv5/parse_string.c
@@ -300,7 +300,7 @@ static struct charset_conv en300468_latin_00_to_utf8[256] = {
 	[0xff] = { 2, {0xc2, 0xad, } },
 };
 
-void iconv_to_charset(struct dvb_v5_fe_parms *parms,
+size_t iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		      char *dest,
 		      size_t destlen,
 		      const unsigned char *src,
@@ -317,6 +317,7 @@ void iconv_to_charset(struct dvb_v5_fe_parms *parms,
 	if (cd == (iconv_t)(-1)) {
 		memcpy(p, src, len);
 		p[len] = '\0';
+		destlen = len;
 		dvb_logerr("Conversion from %s to %s not supported\n",
 				type, output_charset);
 	} else {
@@ -324,6 +325,7 @@ void iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		iconv_close(cd);
 		*p = '\0';
 	}
+	return destlen;
 }
 
 static void charset_conversion(struct dvb_v5_fe_parms *parms, char **dest, const unsigned char *s,
@@ -362,8 +364,9 @@ static void charset_conversion(struct dvb_v5_fe_parms *parms, char **dest, const
 
 	/* Convert from original charset to the desired one */
 	if (need_conversion)
-		iconv_to_charset(parms, *dest, destlen, s, len, type,
+		destlen = iconv_to_charset(parms, *dest, destlen, s, len, type,
 				 output_charset);
+	/* FIXME: do something with destlen */
 }
 
 void parse_string(struct dvb_v5_fe_parms *parms, char **dest, char **emph,
diff --git a/lib/libdvbv5/parse_string.h b/lib/libdvbv5/parse_string.h
index 61d0ed4..4d838d0 100644
--- a/lib/libdvbv5/parse_string.h
+++ b/lib/libdvbv5/parse_string.h
@@ -19,7 +19,7 @@
 
 struct dvb_v5_fe_parms;
 
-void iconv_to_charset(struct dvb_v5_fe_parms *parms,
+size_t iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		      char *dest,
 		      size_t destlen,
 		      const unsigned char *src,
diff --git a/lib/libdvbv5/tables/mpeg_ts.c b/lib/libdvbv5/tables/mpeg_ts.c
index df32484..96b3226 100644
--- a/lib/libdvbv5/tables/mpeg_ts.c
+++ b/lib/libdvbv5/tables/mpeg_ts.c
@@ -56,24 +56,100 @@ void dvb_mpeg_ts_free(struct dvb_mpeg_ts *ts)
 void dvb_mpeg_ts_print(struct dvb_v5_fe_parms *parms, struct dvb_mpeg_ts *ts)
 {
 	dvb_loginfo("MPEG TS");
-	dvb_loginfo(" - sync            0x%02x", ts->sync_byte);
-	dvb_loginfo(" - tei                %d", ts->tei);
-	dvb_loginfo(" - payload_start      %d", ts->payload_start);
-	dvb_loginfo(" - priority           %d", ts->priority);
-	dvb_loginfo(" - pid           0x%04x", ts->pid);
-	dvb_loginfo(" - scrambling         %d", ts->scrambling);
-	dvb_loginfo(" - adaptation_field   %d", ts->adaptation_field);
-	dvb_loginfo(" - continuity_counter %d", ts->continuity_counter);
+	dvb_loginfo("| sync            0x%02x", ts->sync_byte);
+	dvb_loginfo("| tei                %d", ts->tei);
+	dvb_loginfo("| payload_start      %d", ts->payload_start);
+	dvb_loginfo("| priority           %d", ts->priority);
+	dvb_loginfo("| pid           0x%04x", ts->pid);
+	dvb_loginfo("| scrambling         %d", ts->scrambling);
+	dvb_loginfo("| adaptation_field   %d", ts->adaptation_field);
+	dvb_loginfo("| continuity_counter %d", ts->continuity_counter);
 	if (ts->adaptation_field & 0x2) {
-		dvb_loginfo(" Adaption Field");
-                dvb_loginfo("   - length         %d", ts->adaption->length);
-                dvb_loginfo("   - discontinued   %d", ts->adaption->discontinued);
-                dvb_loginfo("   - random_access  %d", ts->adaption->random_access);
-                dvb_loginfo("   - priority       %d", ts->adaption->priority);
-                dvb_loginfo("   - PCR            %d", ts->adaption->PCR);
-                dvb_loginfo("   - OPCR           %d", ts->adaption->OPCR);
-                dvb_loginfo("   - splicing_point %d", ts->adaption->splicing_point);
-                dvb_loginfo("   - private_data   %d", ts->adaption->private_data);
-                dvb_loginfo("   - extension      %d", ts->adaption->extension);
+		dvb_loginfo("|- Adaption Field");
+                dvb_loginfo("|   length         %d", ts->adaption->length);
+                dvb_loginfo("|   discontinued   %d", ts->adaption->discontinued);
+                dvb_loginfo("|   random_access  %d", ts->adaption->random_access);
+                dvb_loginfo("|   priority       %d", ts->adaption->priority);
+                dvb_loginfo("|   PCR            %d", ts->adaption->PCR);
+                dvb_loginfo("|   OPCR           %d", ts->adaption->OPCR);
+                dvb_loginfo("|   splicing_point %d", ts->adaption->splicing_point);
+                dvb_loginfo("|   private_data   %d", ts->adaption->private_data);
+                dvb_loginfo("|   extension      %d", ts->adaption->extension);
 	}
 }
+
+ssize_t dvb_mpeg_ts_create(struct dvb_v5_fe_parms *parms, uint8_t *buf, ssize_t buflen,
+		uint8_t **data, uint16_t pid, int padding)
+{
+	const uint8_t *p = buf, *endbuf = buf + buflen;
+	ssize_t size, total_size, first_size;
+
+	if (padding > 183)
+		padding = 183;
+
+	total_size = DVB_MPEG_TS_PACKET_SIZE;
+	first_size = sizeof(struct dvb_mpeg_ts);
+	if (padding >= 0)
+		first_size += padding + 1;
+
+	if (buflen + first_size > DVB_MPEG_TS_PACKET_SIZE) {
+		int packets = ((buflen - (DVB_MPEG_TS_PACKET_SIZE - total_size)) /
+			(DVB_MPEG_TS_PACKET_SIZE - sizeof(struct dvb_mpeg_ts))) + 1;
+		total_size += packets * DVB_MPEG_TS_PACKET_SIZE;
+	}
+
+	*data = malloc(total_size);
+	uint8_t *q = *data;
+
+	size = sizeof( struct dvb_mpeg_ts );
+	struct dvb_mpeg_ts ts, *ts_dump;
+	memset(&ts, 0x00, size);
+	ts.sync_byte = DVB_MPEG_TS;
+	ts.pid = pid;
+	ts.payload_start = 1;
+	ts.payload = 1;
+
+	memcpy(q, &ts, size );
+	ts_dump = (struct dvb_mpeg_ts *) q;
+	bswap16(ts_dump->bitfield);
+	q += size;
+
+	if (padding >= 0) {
+		*q++ = padding;
+		if (padding > 0) {
+			memset(q, 0xFF, padding);
+			q += padding;
+		}
+
+		size = DVB_MPEG_TS_PACKET_SIZE - sizeof(struct dvb_mpeg_ts) -
+			padding - 1; /* minus padding length byte */
+		if (size > buflen)
+			size = buflen;
+		memcpy(q, p, size);
+		q += size;
+		p += size;
+	}
+
+	ts.payload_start = 0;
+	while (p < endbuf) {
+		ts.continuity_counter++;
+		memcpy(q, &ts, size );
+		ts_dump = (struct dvb_mpeg_ts *) q;
+		bswap16(ts_dump->bitfield);
+		q += size;
+
+		size = DVB_MPEG_TS_PACKET_SIZE - sizeof(struct dvb_mpeg_ts);
+		if (size > p - endbuf)
+			size = p - endbuf;
+		memcpy(q, p, size);
+		q += size;
+		p += size;
+	}
+
+	size = (q - *data) % DVB_MPEG_TS_PACKET_SIZE;
+	if (size)
+		memset(q, 0xFF, DVB_MPEG_TS_PACKET_SIZE - size);
+
+	return total_size;
+}
+
diff --git a/lib/libdvbv5/tables/sdt.c b/lib/libdvbv5/tables/sdt.c
index d27cec8..a3741c1 100644
--- a/lib/libdvbv5/tables/sdt.c
+++ b/lib/libdvbv5/tables/sdt.c
@@ -22,6 +22,8 @@
 #include <libdvbv5/sdt.h>
 #include <libdvbv5/descriptors.h>
 #include <libdvbv5/dvb-fe.h>
+#include <libdvbv5/mpeg_ts.h>
+#include <libdvbv5/crc32.h>
 
 ssize_t dvb_table_sdt_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
 			ssize_t buflen, struct dvb_table_sdt **table)
@@ -117,7 +119,7 @@ ssize_t dvb_table_sdt_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
 void dvb_table_sdt_free(struct dvb_table_sdt *sdt)
 {
 	struct dvb_table_sdt_service *service = sdt->service;
-	while(service) {
+	while (service) {
 		dvb_desc_free((struct dvb_desc **) &service->descriptor);
 		struct dvb_table_sdt_service *tmp = service;
 		service = service->next;
@@ -141,6 +143,7 @@ void dvb_table_sdt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sd
 		dvb_loginfo("|   EIT present following %d", service->EIT_present_following);
 		dvb_loginfo("|   free CA mode          %d", service->free_CA_mode);
 		dvb_loginfo("|   running status        %d", service->running_status);
+		dvb_loginfo("|   reserved              %d", service->reserved);
 		dvb_loginfo("|   descriptor length     %d", service->desc_length);
 		dvb_desc_print(parms, service->descriptor);
 		service = service->next;
@@ -149,3 +152,83 @@ void dvb_table_sdt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt *sd
 	dvb_loginfo("|_  %d services", services);
 }
 
+struct dvb_table_sdt *dvb_table_sdt_create()
+{
+	struct dvb_table_sdt *sdt = calloc( sizeof( struct dvb_table_sdt ), 1 );
+	sdt->header.table_id = DVB_TABLE_SDT;
+	sdt->header.one = 3;
+	sdt->header.zero = 1;
+	sdt->header.syntax = 1;
+	sdt->header.current_next = 1;
+	sdt->header.id = 1;
+	sdt->header.current_next = 1;
+	sdt->header.version = 0;
+	sdt->header.one2 = 3;
+	sdt->header.section_id = 0;
+	sdt->header.last_section = 0;
+
+	sdt->network_id = 1;
+	sdt->reserved = 255;
+	return sdt;
+}
+
+struct dvb_table_sdt_service *dvb_table_sdt_service_create(struct dvb_table_sdt *sdt, uint16_t service_id)
+{
+	struct dvb_table_sdt_service **head = &sdt->service;
+
+	/* append to the list */
+	while (*head != NULL)
+		head = &(*head)->next;
+	*head = calloc( sizeof( struct dvb_table_sdt_service ), 1 );
+	(*head)->service_id = service_id;
+	(*head)->running_status = 4;
+	(*head)->reserved = 63;
+	return *head;
+}
+
+ssize_t dvb_table_sdt_store(struct dvb_v5_fe_parms *parms, const struct dvb_table_sdt *sdt, uint8_t **data)
+{
+	const struct dvb_table_sdt_service *service = sdt->service;
+	uint8_t *p;
+	ssize_t size, size_total;
+
+	*data = malloc( DVB_MAX_PAYLOAD_PACKET_SIZE );
+	p = *data;
+
+
+	size = offsetof(struct dvb_table_sdt, service);
+	memcpy(p, sdt, size);
+	struct dvb_table_sdt *sdt_dump = (struct dvb_table_sdt *) p;
+	p += size;
+
+	bswap16(sdt_dump->network_id);
+
+	service = sdt->service;
+	while (service) {
+		size = offsetof(struct dvb_table_sdt_service, descriptor);
+
+		memcpy(p, service, size);
+		struct dvb_table_sdt_service *service_dump = (struct dvb_table_sdt_service *) p;
+		p += size;
+
+		size = dvb_desc_store(parms, service->descriptor, p);
+		p += size;
+
+		service_dump->desc_length = size;
+
+		bswap16(service_dump->service_id);
+		bswap16(service_dump->bitfield);
+
+		service = service->next;
+	}
+
+	size_total = p - *data + DVB_CRC_SIZE;
+	sdt_dump->header.section_length = size_total - offsetof(struct dvb_table_header, id);
+	bswap16(sdt_dump->header.bitfield);
+
+	uint32_t crc = crc32(*data, size_total - DVB_CRC_SIZE, 0xFFFFFFFF);
+	bswap32(crc);
+	*(uint32_t *) p = crc;
+
+	return size_total;
+}
-- 
1.9.1

