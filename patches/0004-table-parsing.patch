From 48cd22f76bd33c5e8bca9ceaee215001817aa83e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Roth?= <neolynx@gmail.com>
Date: Thu, 7 Jun 2012 16:17:44 +0200
Subject: [PATCH 04/15] table parsing

---
 lib/include/descriptors.h           |   19 +-
 lib/include/descriptors/header.h    |    2 +-
 lib/include/descriptors/language.h  |   48 +++++
 lib/include/descriptors/nit.h       |   80 +++++++++
 lib/include/descriptors/pat.h       |   13 +-
 lib/include/descriptors/pmt.h       |   53 +++---
 lib/libdvbv5/Makefile.am            |    4 +-
 lib/libdvbv5/descriptors.c          |  331 +++++++++++++++++++----------------
 lib/libdvbv5/descriptors/header.c   |    2 +-
 lib/libdvbv5/descriptors/language.c |   43 +++++
 lib/libdvbv5/descriptors/nit.c      |   69 ++++++++
 lib/libdvbv5/descriptors/pat.c      |   36 ++--
 lib/libdvbv5/descriptors/pmt.c      |  149 +++++++---------
 13 files changed, 547 insertions(+), 302 deletions(-)
 create mode 100644 lib/include/descriptors/language.h
 create mode 100644 lib/include/descriptors/nit.h
 create mode 100644 lib/libdvbv5/descriptors/language.c
 create mode 100644 lib/libdvbv5/descriptors/nit.c

diff --git a/lib/include/descriptors.h b/lib/include/descriptors.h
index affd17d..9b81295 100644
--- a/lib/include/descriptors.h
+++ b/lib/include/descriptors.h
@@ -32,15 +32,12 @@
 #define DVB_MAX_PAYLOAD_PACKET_SIZE 4096
 #define DVB_PID_SDT      17
 #define DVB_TABLE_SDT    66
-#define DVB_PID_NIT      16
-#define DVB_TABLE_NIT    64
 #define DVB_PMT_TABLE_ID 2
 
-typedef int (*dvb_table_init_func)(uint8_t *ptr, ssize_t size);
+typedef void *(*dvb_table_init_func)(const uint8_t *ptr, ssize_t size);
 
 struct dvb_table_init {
 	dvb_table_init_func init;
-	size_t info_length;
 };
 
 extern const struct dvb_table_init dvb_table_initializers[];
@@ -51,14 +48,24 @@ extern const struct dvb_table_init dvb_table_initializers[];
 
 struct dvb_desc {
 	uint8_t type;
+	struct dvb_desc *next;
+	uint8_t data[];
+} __attribute__((packed));
 
-};
+void dvb_desc_init(const uint8_t *buf, struct dvb_desc *desc);
+
+ssize_t dvb_parse_descriptor(const uint8_t *buf, uint8_t *dest, uint16_t section_length, struct dvb_desc **head_desc);
+
+struct dvb_v5_fe_parms;
 
-typedef int (*dvb_desc_init_func)(uint8_t *buf, struct dvb_desc *desc);
+typedef ssize_t (*dvb_desc_init_func)(const uint8_t *buf, struct dvb_desc *desc);
+typedef void (*dvb_desc_print_func)(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
 
 struct dvb_descriptor {
 	const char *name;
 	dvb_desc_init_func init;
+	dvb_desc_print_func print;
+	ssize_t desc_size;
 };
 
 extern const struct dvb_descriptor dvb_descriptors[];
diff --git a/lib/include/descriptors/header.h b/lib/include/descriptors/header.h
index d2add2d..1b9ccf2 100644
--- a/lib/include/descriptors/header.h
+++ b/lib/include/descriptors/header.h
@@ -53,7 +53,7 @@ extern "C" {
 #endif
 
 int  dvb_table_header_init (struct dvb_table_header *t);
-void dvb_table_header_print(struct dvb_v5_fe_parms *parms, struct dvb_table_header *t);
+void dvb_table_header_print(struct dvb_v5_fe_parms *parms, const struct dvb_table_header *t);
 
 #ifdef __cplusplus
 }
diff --git a/lib/include/descriptors/language.h b/lib/include/descriptors/language.h
new file mode 100644
index 0000000..8cc3e7f
--- /dev/null
+++ b/lib/include/descriptors/language.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) 2011-2012 - Mauro Carvalho Chehab <mchehab@redhat.com>
+ * Copyright (c) 2012 - Andre Roth <neolynx@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation version 2
+ * of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ *
+ */
+
+#ifndef _LANGUAGE_H
+#define _LANGUAGE_H
+
+#include <stdint.h>
+#include <unistd.h> /* ssize_t */
+
+struct dvb_desc_language {
+	uint8_t type;
+	struct dvb_desc *next;
+	unsigned char language[4];
+	uint8_t audio_type;
+} __attribute__((packed));
+
+struct dvb_v5_fe_parms;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+ssize_t dvb_desc_language_init(const uint8_t *buf, struct dvb_desc *desc);
+void dvb_desc_language_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/lib/include/descriptors/nit.h b/lib/include/descriptors/nit.h
new file mode 100644
index 0000000..dffd19e
--- /dev/null
+++ b/lib/include/descriptors/nit.h
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2011-2012 - Mauro Carvalho Chehab <mchehab@redhat.com>
+ * Copyright (c) 2012 - Andre Roth <neolynx@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation version 2
+ * of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ *
+ */
+
+#ifndef _NIT_H
+#define _NIT_H
+
+#include <stdint.h>
+#include <unistd.h> /* ssize_t */
+
+#include "descriptors/header.h"
+#include "descriptors.h"
+
+#define DVB_TABLE_NIT      0x40
+#define DVB_TABLE_NIT_PID  0x10
+
+union dvb_table_nit_transport_header {
+	uint16_t bitfield;
+	struct {
+		uint16_t transport_length:12;
+		uint16_t reserved:4;
+	};
+};
+
+struct dvb_table_nit_transport {
+	uint16_t transport_id;
+	uint16_t network_id;
+	union {
+		uint16_t bitfield;
+		struct {
+			uint16_t desc_length:12;
+			uint16_t reserved:4;
+		};
+	};
+} __attribute__((packed));
+
+struct dvb_table_nit {
+	struct dvb_table_header header;
+	union {
+		uint16_t bitfield;
+		struct {
+			uint16_t desc_length:12;
+			uint16_t reserved:4;
+		};
+	};
+	uint16_t transports;
+	struct dvb_table_nit_transport transport[];
+} __attribute__((packed));
+
+struct dvb_v5_fe_parms;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+void *dvb_table_nit_init(const uint8_t *buf, ssize_t size);
+void dvb_table_nit_print(struct dvb_v5_fe_parms *parms, struct dvb_table_nit *nit);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/lib/include/descriptors/pat.h b/lib/include/descriptors/pat.h
index 4eb6e85..b377097 100644
--- a/lib/include/descriptors/pat.h
+++ b/lib/include/descriptors/pat.h
@@ -30,7 +30,7 @@
 #define DVB_TABLE_PAT      0
 #define DVB_TABLE_PAT_PID  0
 
-struct dvb_table_pat_entry {
+struct dvb_table_pat_program {
 	uint16_t program_id;
 	union {
 		uint16_t bitfield;
@@ -39,17 +39,12 @@ struct dvb_table_pat_entry {
 			uint8_t  reserved:3;
 		} __attribute__((packed));
 	};
-
 } __attribute__((packed));
 
-struct dvb_table_pat_info {
-	uint16_t entries;
-};
-
 struct dvb_table_pat {
-	struct dvb_table_pat_info info;
 	struct dvb_table_header header;
-	struct dvb_table_pat_entry entry[];
+	uint16_t programs;
+	struct dvb_table_pat_program program[];
 } __attribute__((packed));
 
 struct dvb_v5_fe_parms;
@@ -58,7 +53,7 @@ struct dvb_v5_fe_parms;
 extern "C" {
 #endif
 
-int  dvb_table_pat_init(unsigned char *buf, ssize_t size);
+void *dvb_table_pat_init(const uint8_t *buf, ssize_t size);
 void dvb_table_pat_print(struct dvb_v5_fe_parms *parms, struct dvb_table_pat *t);
 
 #ifdef __cplusplus
diff --git a/lib/include/descriptors/pmt.h b/lib/include/descriptors/pmt.h
index 6289c1b..b5f32c6 100644
--- a/lib/include/descriptors/pmt.h
+++ b/lib/include/descriptors/pmt.h
@@ -26,61 +26,50 @@
 #include <unistd.h> /* ssize_t */
 
 #include "descriptors/header.h"
+#include "descriptors.h"
 
 #define DVB_TABLE_PMT      2
 
-struct dvb_table_pmt_prog {
-	uint8_t stream_type;
+struct dvb_table_pmt_stream {
+	uint8_t type;
 	union {
 		uint16_t bitfield;
 		struct {
 			uint16_t elementary_pid:13;
-			uint8_t  reserved:3;
-		} __attribute__((packed));
+			uint16_t  reserved:3;
+		};
 	};
 	union {
 		uint16_t bitfield2;
 		struct {
-			uint16_t desc_length:10;
-			uint8_t  zero:2;
-			uint8_t  reserved2:4;
-		} __attribute__((packed));
+			uint16_t section_length:10;
+			uint16_t  zero:2;
+			uint16_t  reserved2:4;
+		};
 	};
-	uint8_t  type;
-	uint8_t  info_length;
-	const char info[];
+	struct dvb_desc *descriptor;
+	struct dvb_table_pmt_stream *next;
 } __attribute__((packed));
 
-struct dvb_table_pmt_entry {
-	uint16_t elementary_pid;
-	uint8_t  type;
-	const uint8_t *info;
-} __attribute__((packed));
-
-struct dvb_table_pmt_info {
-	uint16_t entries;
-};
-
 struct dvb_table_pmt {
-	struct dvb_table_pmt_info info;
 	struct dvb_table_header header;
 	union {
-		uint16_t bitfield2;
+		uint16_t bitfield;
 		struct {
 			uint16_t pcr_pid:13;
-			uint8_t reserved2:3;
-		} __attribute__((packed));
+			uint16_t reserved2:3;
+		};
 	};
 
 	union {
-		uint16_t bitfield3;
+		uint16_t bitfield2;
 		struct {
 			uint16_t prog_length:10;
-			uint8_t  zero3:2;
-			uint8_t  reserved3:4;
-		} __attribute__((packed));
+			uint16_t  zero3:2;
+			uint16_t  reserved3:4;
+		};
 	};
-	struct dvb_table_pmt_entry entry[];
+	struct dvb_table_pmt_stream *stream;
 } __attribute__((packed));
 
 struct dvb_v5_fe_parms;
@@ -89,8 +78,8 @@ struct dvb_v5_fe_parms;
 extern "C" {
 #endif
 
-int  dvb_table_pmt_init(uint8_t *ptr, ssize_t size);
-void dvb_table_pmt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_pmt *pmt);
+void *dvb_table_pmt_init(const uint8_t *buf, ssize_t size);
+void dvb_table_pmt_print(struct dvb_v5_fe_parms *parms, const struct dvb_table_pmt *pmt);
 
 #ifdef __cplusplus
 }
diff --git a/lib/libdvbv5/Makefile.am b/lib/libdvbv5/Makefile.am
index e529350..aff7895 100644
--- a/lib/libdvbv5/Makefile.am
+++ b/lib/libdvbv5/Makefile.am
@@ -25,7 +25,9 @@ libdvbv5_la_SOURCES = \
   descriptors.c descriptors.h \
   descriptors/header.c ../include/descriptors/header.h \
   descriptors/pat.c  ../include/descriptors/pat.h \
-  descriptors/pmt.c  ../include/descriptors/pmt.h
+  descriptors/pmt.c  ../include/descriptors/pmt.h \
+  descriptors/language.c  ../include/descriptors/language.h \
+  descriptors/nit.c  ../include/descriptors/nit.h
 
 libdvbv5_la_CPPFLAGS = $(ENFORCE_LIBDVBV5_STATIC)
 libdvbv5_la_LDFLAGS = -version-info 0 $(ENFORCE_LIBDVBV5_STATIC)
diff --git a/lib/libdvbv5/descriptors.c b/lib/libdvbv5/descriptors.c
index fb74c42..031d7b6 100644
--- a/lib/libdvbv5/descriptors.c
+++ b/lib/libdvbv5/descriptors.c
@@ -31,10 +31,19 @@
 
 #include "descriptors/pat.h"
 #include "descriptors/pmt.h"
+#include "descriptors/language.h"
+#include "descriptors/nit.h"
+
+void dvb_desc_init(const uint8_t *buf, struct dvb_desc *desc)
+{
+	desc->type = buf[0];
+	desc->next = NULL;
+}
 
 const struct dvb_table_init dvb_table_initializers[] = {
-	[DVB_TABLE_PAT] = { dvb_table_pat_init, sizeof(struct dvb_table_pat_info) },
-	[DVB_TABLE_PMT] = { dvb_table_pmt_init, sizeof(struct dvb_table_pmt_info) },
+	[DVB_TABLE_PAT] = { dvb_table_pat_init },
+	[DVB_TABLE_PMT] = { dvb_table_pmt_init },
+	[DVB_TABLE_NIT] = { dvb_table_nit_init },
 };
 
 static char *default_charset = "iso-8859-1";
@@ -47,156 +56,176 @@ static char *table[] = {
 	[SDT] = "SDT",
 };
 
+ssize_t dvb_parse_descriptor(const uint8_t *buf, uint8_t *dest, uint16_t section_length, struct dvb_desc **head_desc)
+{
+	ssize_t length = 0;
+	while (length < section_length) {
+		uint8_t type = buf[0];
+		if (dvb_descriptors[type].init) {
+			ssize_t len = dvb_descriptors[type].init( buf, (struct dvb_desc *) dest );
+			if(!*head_desc)
+				*head_desc = (struct dvb_desc *) dest;
+			dest += len;
+			length += len;
+
+		} else {
+			printf( "parsing of descriptor %s (%d) is not implemented yet\n", dvb_descriptors[type].name, type );
+			break;
+		}
+	}
+	return length;
+}
+
 const struct dvb_descriptor dvb_descriptors[] = {
-	[0 ...255 ] = { "Unknown descriptor", NULL },
-	[video_stream_descriptor] = { "video_stream_descriptor", NULL },
-	[audio_stream_descriptor] = { "audio_stream_descriptor", NULL },
-	[hierarchy_descriptor] = { "hierarchy_descriptor", NULL },
-	[dvbpsi_registration_descriptor] = { "dvbpsi_registration_descriptor", NULL },
-	[ds_alignment_descriptor] = { "ds_alignment_descriptor", NULL },
-	[target_background_grid_descriptor] = { "target_background_grid_descriptor", NULL },
-	[video_window_descriptor] = { "video_window_descriptor", NULL },
-	[conditional_access_descriptor] = { "conditional_access_descriptor", NULL },
-	[iso639_language_descriptor] = { "iso639_language_descriptor", NULL },
-	[system_clock_descriptor] = { "system_clock_descriptor", NULL },
-	[multiplex_buffer_utilization_descriptor] = { "multiplex_buffer_utilization_descriptor", NULL },
-	[copyright_descriptor] = { "copyright_descriptor", NULL },
-	[maximum_bitrate_descriptor] = { "maximum_bitrate_descriptor", NULL },
-	[private_data_indicator_descriptor] = { "private_data_indicator_descriptor", NULL },
-	[smoothing_buffer_descriptor] = { "smoothing_buffer_descriptor", NULL },
-	[std_descriptor] = { "std_descriptor", NULL },
-	[ibp_descriptor] = { "ibp_descriptor", NULL },
-	[mpeg4_video_descriptor] = { "mpeg4_video_descriptor", NULL },
-	[mpeg4_audio_descriptor] = { "mpeg4_audio_descriptor", NULL },
-	[iod_descriptor] = { "iod_descriptor", NULL },
-	[sl_descriptor] = { "sl_descriptor", NULL },
-	[fmc_descriptor] = { "fmc_descriptor", NULL },
-	[external_es_id_descriptor] = { "external_es_id_descriptor", NULL },
-	[muxcode_descriptor] = { "muxcode_descriptor", NULL },
-	[fmxbuffersize_descriptor] = { "fmxbuffersize_descriptor", NULL },
-	[multiplexbuffer_descriptor] = { "multiplexbuffer_descriptor", NULL },
-	[content_labeling_descriptor] = { "content_labeling_descriptor", NULL },
-	[metadata_pointer_descriptor] = { "metadata_pointer_descriptor", NULL },
-	[metadata_descriptor] = { "metadata_descriptor", NULL },
-	[metadata_std_descriptor] = { "metadata_std_descriptor", NULL },
-	[AVC_video_descriptor] = { "AVC_video_descriptor", NULL },
-	[ipmp_descriptor] = { "ipmp_descriptor", NULL },
-	[AVC_timing_and_HRD_descriptor] = { "AVC_timing_and_HRD_descriptor", NULL },
-	[mpeg2_aac_audio_descriptor] = { "mpeg2_aac_audio_descriptor", NULL },
-	[flexmux_timing_descriptor] = { "flexmux_timing_descriptor", NULL },
-	[network_name_descriptor] = { "network_name_descriptor", NULL },
-	[service_list_descriptor] = { "service_list_descriptor", NULL },
-	[stuffing_descriptor] = { "stuffing_descriptor", NULL },
-	[satellite_delivery_system_descriptor] = { "satellite_delivery_system_descriptor", NULL },
-	[cable_delivery_system_descriptor] = { "cable_delivery_system_descriptor", NULL },
-	[VBI_data_descriptor] = { "VBI_data_descriptor", NULL },
-	[VBI_teletext_descriptor] = { "VBI_teletext_descriptor", NULL },
-	[bouquet_name_descriptor] = { "bouquet_name_descriptor", NULL },
-	[service_descriptor] = { "service_descriptor", NULL },
-	[country_availability_descriptor] = { "country_availability_descriptor", NULL },
-	[linkage_descriptor] = { "linkage_descriptor", NULL },
-	[NVOD_reference_descriptor] = { "NVOD_reference_descriptor", NULL },
-	[time_shifted_service_descriptor] = { "time_shifted_service_descriptor", NULL },
-	[short_event_descriptor] = { "short_event_descriptor", NULL },
-	[extended_event_descriptor] = { "extended_event_descriptor", NULL },
-	[time_shifted_event_descriptor] = { "time_shifted_event_descriptor", NULL },
-	[component_descriptor] = { "component_descriptor", NULL },
-	[mosaic_descriptor] = { "mosaic_descriptor", NULL },
-	[stream_identifier_descriptor] = { "stream_identifier_descriptor", NULL },
-	[CA_identifier_descriptor] = { "CA_identifier_descriptor", NULL },
-	[content_descriptor] = { "content_descriptor", NULL },
-	[parental_rating_descriptor] = { "parental_rating_descriptor", NULL },
-	[teletext_descriptor] = { "teletext_descriptor", NULL },
-	[telephone_descriptor] = { "telephone_descriptor", NULL },
-	[local_time_offset_descriptor] = { "local_time_offset_descriptor", NULL },
-	[subtitling_descriptor] = { "subtitling_descriptor", NULL },
-	[terrestrial_delivery_system_descriptor] = { "terrestrial_delivery_system_descriptor", NULL },
-	[multilingual_network_name_descriptor] = { "multilingual_network_name_descriptor", NULL },
-	[multilingual_bouquet_name_descriptor] = { "multilingual_bouquet_name_descriptor", NULL },
-	[multilingual_service_name_descriptor] = { "multilingual_service_name_descriptor", NULL },
-	[multilingual_component_descriptor] = { "multilingual_component_descriptor", NULL },
-	[private_data_specifier_descriptor] = { "private_data_specifier_descriptor", NULL },
-	[service_move_descriptor] = { "service_move_descriptor", NULL },
-	[short_smoothing_buffer_descriptor] = { "short_smoothing_buffer_descriptor", NULL },
-	[frequency_list_descriptor] = { "frequency_list_descriptor", NULL },
-	[partial_transport_stream_descriptor] = { "partial_transport_stream_descriptor", NULL },
-	[data_broadcast_descriptor] = { "data_broadcast_descriptor", NULL },
-	[scrambling_descriptor] = { "scrambling_descriptor", NULL },
-	[data_broadcast_id_descriptor] = { "data_broadcast_id_descriptor", NULL },
-	[transport_stream_descriptor] = { "transport_stream_descriptor", NULL },
-	[DSNG_descriptor] = { "DSNG_descriptor", NULL },
-	[PDC_descriptor] = { "PDC_descriptor", NULL },
-	[AC_3_descriptor] = { "AC_3_descriptor", NULL },
-	[ancillary_data_descriptor] = { "ancillary_data_descriptor", NULL },
-	[cell_list_descriptor] = { "cell_list_descriptor", NULL },
-	[cell_frequency_link_descriptor] = { "cell_frequency_link_descriptor", NULL },
-	[announcement_support_descriptor] = { "announcement_support_descriptor", NULL },
-	[application_signalling_descriptor] = { "application_signalling_descriptor", NULL },
-	[adaptation_field_data_descriptor] = { "adaptation_field_data_descriptor", NULL },
-	[service_identifier_descriptor] = { "service_identifier_descriptor", NULL },
-	[service_availability_descriptor] = { "service_availability_descriptor", NULL },
-	[default_authority_descriptor] = { "default_authority_descriptor", NULL },
-	[related_content_descriptor] = { "related_content_descriptor", NULL },
-	[TVA_id_descriptor] = { "TVA_id_descriptor", NULL },
-	[content_identifier_descriptor] = { "content_identifier_descriptor", NULL },
-	[time_slice_fec_identifier_descriptor] = { "time_slice_fec_identifier_descriptor", NULL },
-	[ECM_repetition_rate_descriptor] = { "ECM_repetition_rate_descriptor", NULL },
-	[S2_satellite_delivery_system_descriptor] = { "S2_satellite_delivery_system_descriptor", NULL },
-	[enhanced_AC_3_descriptor] = { "enhanced_AC_3_descriptor", NULL },
-	[DTS_descriptor] = { "DTS_descriptor", NULL },
-	[AAC_descriptor] = { "AAC_descriptor", NULL },
-	[XAIT_location_descriptor] = { "XAIT_location_descriptor", NULL },
-	[FTA_content_management_descriptor] = { "FTA_content_management_descriptor", NULL },
-	[extension_descriptor] = { "extension_descriptor", NULL },
-
-	[CUE_identifier_descriptor] = { "CUE_identifier_descriptor", NULL },
-
-	[component_name_descriptor] = { "component_name_descriptor", NULL },
-	[logical_channel_number_descriptor] = { "logical_channel_number_descriptor", NULL },
-
-	[carousel_id_descriptor] = { "carousel_id_descriptor", NULL },
-	[association_tag_descriptor] = { "association_tag_descriptor", NULL },
-	[deferred_association_tags_descriptor] = { "deferred_association_tags_descriptor", NULL },
-
-	[hierarchical_transmission_descriptor] = { "hierarchical_transmission_descriptor", NULL },
-	[digital_copy_control_descriptor] = { "digital_copy_control_descriptor", NULL },
-	[network_identifier_descriptor] = { "network_identifier_descriptor", NULL },
-	[partial_transport_stream_time_descriptor] = { "partial_transport_stream_time_descriptor", NULL },
-	[audio_component_descriptor] = { "audio_component_descriptor", NULL },
-	[hyperlink_descriptor] = { "hyperlink_descriptor", NULL },
-	[target_area_descriptor] = { "target_area_descriptor", NULL },
-	[data_contents_descriptor] = { "data_contents_descriptor", NULL },
-	[video_decode_control_descriptor] = { "video_decode_control_descriptor", NULL },
-	[download_content_descriptor] = { "download_content_descriptor", NULL },
-	[CA_EMM_TS_descriptor] = { "CA_EMM_TS_descriptor", NULL },
-	[CA_contract_information_descriptor] = { "CA_contract_information_descriptor", NULL },
-	[CA_service_descriptor] = { "CA_service_descriptor", NULL },
-	[TS_Information_descriptior] = { "TS_Information_descriptior", NULL },
-	[extended_broadcaster_descriptor] = { "extended_broadcaster_descriptor", NULL },
-	[logo_transmission_descriptor] = { "logo_transmission_descriptor", NULL },
-	[basic_local_event_descriptor] = { "basic_local_event_descriptor", NULL },
-	[reference_descriptor] = { "reference_descriptor", NULL },
-	[node_relation_descriptor] = { "node_relation_descriptor", NULL },
-	[short_node_information_descriptor] = { "short_node_information_descriptor", NULL },
-	[STC_reference_descriptor] = { "STC_reference_descriptor", NULL },
-	[series_descriptor] = { "series_descriptor", NULL },
-	[event_group_descriptor] = { "event_group_descriptor", NULL },
-	[SI_parameter_descriptor] = { "SI_parameter_descriptor", NULL },
-	[broadcaster_Name_Descriptor] = { "broadcaster_Name_Descriptor", NULL },
-	[component_group_descriptor] = { "component_group_descriptor", NULL },
-	[SI_prime_TS_descriptor] = { "SI_prime_TS_descriptor", NULL },
-	[board_information_descriptor] = { "board_information_descriptor", NULL },
-	[LDT_linkage_descriptor] = { "LDT_linkage_descriptor", NULL },
-	[connected_transmission_descriptor] = { "connected_transmission_descriptor", NULL },
-	[content_availability_descriptor] = { "content_availability_descriptor", NULL },
-	[service_group_descriptor] = { "service_group_descriptor", NULL },
-	[carousel_compatible_composite_Descriptor] = { "carousel_compatible_composite_Descriptor", NULL },
-	[conditional_playback_descriptor] = { "conditional_playback_descriptor", NULL },
-	[ISDBT_delivery_system_descriptor] = { "ISDBT_delivery_system_descriptor", NULL },
-	[partial_reception_descriptor] = { "partial_reception_descriptor", NULL },
-	[emergency_information_descriptor] = { "emergency_information_descriptor", NULL },
-	[data_component_descriptor] = { "data_component_descriptor", NULL },
-	[system_management_descriptor] = { "system_management_descriptor", NULL },
+	[0 ...255 ] = { "Unknown descriptor", NULL, NULL },
+	[video_stream_descriptor] = { "video_stream_descriptor", NULL, NULL },
+	[audio_stream_descriptor] = { "audio_stream_descriptor", NULL, NULL },
+	[hierarchy_descriptor] = { "hierarchy_descriptor", NULL, NULL },
+	[dvbpsi_registration_descriptor] = { "dvbpsi_registration_descriptor", NULL, NULL },
+	[ds_alignment_descriptor] = { "ds_alignment_descriptor", NULL, NULL },
+	[target_background_grid_descriptor] = { "target_background_grid_descriptor", NULL, NULL },
+	[video_window_descriptor] = { "video_window_descriptor", NULL, NULL },
+	[conditional_access_descriptor] = { "conditional_access_descriptor", NULL, NULL },
+	[iso639_language_descriptor] = { "iso639_language_descriptor", dvb_desc_language_init, dvb_desc_language_print },
+	[system_clock_descriptor] = { "system_clock_descriptor", NULL, NULL },
+	[multiplex_buffer_utilization_descriptor] = { "multiplex_buffer_utilization_descriptor", NULL, NULL },
+	[copyright_descriptor] = { "copyright_descriptor", NULL, NULL },
+	[maximum_bitrate_descriptor] = { "maximum_bitrate_descriptor", NULL, NULL },
+	[private_data_indicator_descriptor] = { "private_data_indicator_descriptor", NULL, NULL },
+	[smoothing_buffer_descriptor] = { "smoothing_buffer_descriptor", NULL, NULL },
+	[std_descriptor] = { "std_descriptor", NULL, NULL },
+	[ibp_descriptor] = { "ibp_descriptor", NULL, NULL },
+	[mpeg4_video_descriptor] = { "mpeg4_video_descriptor", NULL, NULL },
+	[mpeg4_audio_descriptor] = { "mpeg4_audio_descriptor", NULL, NULL },
+	[iod_descriptor] = { "iod_descriptor", NULL, NULL },
+	[sl_descriptor] = { "sl_descriptor", NULL, NULL },
+	[fmc_descriptor] = { "fmc_descriptor", NULL, NULL },
+	[external_es_id_descriptor] = { "external_es_id_descriptor", NULL, NULL },
+	[muxcode_descriptor] = { "muxcode_descriptor", NULL, NULL },
+	[fmxbuffersize_descriptor] = { "fmxbuffersize_descriptor", NULL, NULL },
+	[multiplexbuffer_descriptor] = { "multiplexbuffer_descriptor", NULL, NULL },
+	[content_labeling_descriptor] = { "content_labeling_descriptor", NULL, NULL },
+	[metadata_pointer_descriptor] = { "metadata_pointer_descriptor", NULL, NULL },
+	[metadata_descriptor] = { "metadata_descriptor", NULL, NULL },
+	[metadata_std_descriptor] = { "metadata_std_descriptor", NULL, NULL },
+	[AVC_video_descriptor] = { "AVC_video_descriptor", NULL, NULL },
+	[ipmp_descriptor] = { "ipmp_descriptor", NULL, NULL },
+	[AVC_timing_and_HRD_descriptor] = { "AVC_timing_and_HRD_descriptor", NULL, NULL },
+	[mpeg2_aac_audio_descriptor] = { "mpeg2_aac_audio_descriptor", NULL, NULL },
+	[flexmux_timing_descriptor] = { "flexmux_timing_descriptor", NULL, NULL },
+	[network_name_descriptor] = { "network_name_descriptor", NULL, NULL },
+	[service_list_descriptor] = { "service_list_descriptor", NULL, NULL },
+	[stuffing_descriptor] = { "stuffing_descriptor", NULL, NULL },
+	[satellite_delivery_system_descriptor] = { "satellite_delivery_system_descriptor", NULL, NULL },
+	[cable_delivery_system_descriptor] = { "cable_delivery_system_descriptor", NULL, NULL },
+	[VBI_data_descriptor] = { "VBI_data_descriptor", NULL, NULL },
+	[VBI_teletext_descriptor] = { "VBI_teletext_descriptor", NULL, NULL },
+	[bouquet_name_descriptor] = { "bouquet_name_descriptor", NULL, NULL },
+	[service_descriptor] = { "service_descriptor", NULL, NULL },
+	[country_availability_descriptor] = { "country_availability_descriptor", NULL, NULL },
+	[linkage_descriptor] = { "linkage_descriptor", NULL, NULL },
+	[NVOD_reference_descriptor] = { "NVOD_reference_descriptor", NULL, NULL },
+	[time_shifted_service_descriptor] = { "time_shifted_service_descriptor", NULL, NULL },
+	[short_event_descriptor] = { "short_event_descriptor", NULL, NULL },
+	[extended_event_descriptor] = { "extended_event_descriptor", NULL, NULL },
+	[time_shifted_event_descriptor] = { "time_shifted_event_descriptor", NULL, NULL },
+	[component_descriptor] = { "component_descriptor", NULL, NULL },
+	[mosaic_descriptor] = { "mosaic_descriptor", NULL, NULL },
+	[stream_identifier_descriptor] = { "stream_identifier_descriptor", NULL, NULL },
+	[CA_identifier_descriptor] = { "CA_identifier_descriptor", NULL, NULL },
+	[content_descriptor] = { "content_descriptor", NULL, NULL },
+	[parental_rating_descriptor] = { "parental_rating_descriptor", NULL, NULL },
+	[teletext_descriptor] = { "teletext_descriptor", NULL, NULL },
+	[telephone_descriptor] = { "telephone_descriptor", NULL, NULL },
+	[local_time_offset_descriptor] = { "local_time_offset_descriptor", NULL, NULL },
+	[subtitling_descriptor] = { "subtitling_descriptor", NULL, NULL },
+	[terrestrial_delivery_system_descriptor] = { "terrestrial_delivery_system_descriptor", NULL, NULL },
+	[multilingual_network_name_descriptor] = { "multilingual_network_name_descriptor", NULL, NULL },
+	[multilingual_bouquet_name_descriptor] = { "multilingual_bouquet_name_descriptor", NULL, NULL },
+	[multilingual_service_name_descriptor] = { "multilingual_service_name_descriptor", NULL, NULL },
+	[multilingual_component_descriptor] = { "multilingual_component_descriptor", NULL, NULL },
+	[private_data_specifier_descriptor] = { "private_data_specifier_descriptor", NULL, NULL },
+	[service_move_descriptor] = { "service_move_descriptor", NULL, NULL },
+	[short_smoothing_buffer_descriptor] = { "short_smoothing_buffer_descriptor", NULL, NULL },
+	[frequency_list_descriptor] = { "frequency_list_descriptor", NULL, NULL },
+	[partial_transport_stream_descriptor] = { "partial_transport_stream_descriptor", NULL, NULL },
+	[data_broadcast_descriptor] = { "data_broadcast_descriptor", NULL, NULL },
+	[scrambling_descriptor] = { "scrambling_descriptor", NULL, NULL },
+	[data_broadcast_id_descriptor] = { "data_broadcast_id_descriptor", NULL, NULL },
+	[transport_stream_descriptor] = { "transport_stream_descriptor", NULL, NULL },
+	[DSNG_descriptor] = { "DSNG_descriptor", NULL, NULL },
+	[PDC_descriptor] = { "PDC_descriptor", NULL, NULL },
+	[AC_3_descriptor] = { "AC_3_descriptor", NULL, NULL },
+	[ancillary_data_descriptor] = { "ancillary_data_descriptor", NULL, NULL },
+	[cell_list_descriptor] = { "cell_list_descriptor", NULL, NULL },
+	[cell_frequency_link_descriptor] = { "cell_frequency_link_descriptor", NULL, NULL },
+	[announcement_support_descriptor] = { "announcement_support_descriptor", NULL, NULL },
+	[application_signalling_descriptor] = { "application_signalling_descriptor", NULL, NULL },
+	[adaptation_field_data_descriptor] = { "adaptation_field_data_descriptor", NULL, NULL },
+	[service_identifier_descriptor] = { "service_identifier_descriptor", NULL, NULL },
+	[service_availability_descriptor] = { "service_availability_descriptor", NULL, NULL },
+	[default_authority_descriptor] = { "default_authority_descriptor", NULL, NULL },
+	[related_content_descriptor] = { "related_content_descriptor", NULL, NULL },
+	[TVA_id_descriptor] = { "TVA_id_descriptor", NULL, NULL },
+	[content_identifier_descriptor] = { "content_identifier_descriptor", NULL, NULL },
+	[time_slice_fec_identifier_descriptor] = { "time_slice_fec_identifier_descriptor", NULL, NULL },
+	[ECM_repetition_rate_descriptor] = { "ECM_repetition_rate_descriptor", NULL, NULL },
+	[S2_satellite_delivery_system_descriptor] = { "S2_satellite_delivery_system_descriptor", NULL, NULL },
+	[enhanced_AC_3_descriptor] = { "enhanced_AC_3_descriptor", NULL, NULL },
+	[DTS_descriptor] = { "DTS_descriptor", NULL, NULL },
+	[AAC_descriptor] = { "AAC_descriptor", NULL, NULL },
+	[XAIT_location_descriptor] = { "XAIT_location_descriptor", NULL, NULL },
+	[FTA_content_management_descriptor] = { "FTA_content_management_descriptor", NULL, NULL },
+	[extension_descriptor] = { "extension_descriptor", NULL, NULL },
+
+	[CUE_identifier_descriptor] = { "CUE_identifier_descriptor", NULL, NULL },
+
+	[component_name_descriptor] = { "component_name_descriptor", NULL, NULL },
+	[logical_channel_number_descriptor] = { "logical_channel_number_descriptor", NULL, NULL },
+
+	[carousel_id_descriptor] = { "carousel_id_descriptor", NULL, NULL },
+	[association_tag_descriptor] = { "association_tag_descriptor", NULL, NULL },
+	[deferred_association_tags_descriptor] = { "deferred_association_tags_descriptor", NULL, NULL },
+
+	[hierarchical_transmission_descriptor] = { "hierarchical_transmission_descriptor", NULL, NULL },
+	[digital_copy_control_descriptor] = { "digital_copy_control_descriptor", NULL, NULL },
+	[network_identifier_descriptor] = { "network_identifier_descriptor", NULL, NULL },
+	[partial_transport_stream_time_descriptor] = { "partial_transport_stream_time_descriptor", NULL, NULL },
+	[audio_component_descriptor] = { "audio_component_descriptor", NULL, NULL },
+	[hyperlink_descriptor] = { "hyperlink_descriptor", NULL, NULL },
+	[target_area_descriptor] = { "target_area_descriptor", NULL, NULL },
+	[data_contents_descriptor] = { "data_contents_descriptor", NULL, NULL },
+	[video_decode_control_descriptor] = { "video_decode_control_descriptor", NULL, NULL },
+	[download_content_descriptor] = { "download_content_descriptor", NULL, NULL },
+	[CA_EMM_TS_descriptor] = { "CA_EMM_TS_descriptor", NULL, NULL },
+	[CA_contract_information_descriptor] = { "CA_contract_information_descriptor", NULL, NULL },
+	[CA_service_descriptor] = { "CA_service_descriptor", NULL, NULL },
+	[TS_Information_descriptior] = { "TS_Information_descriptior", NULL, NULL },
+	[extended_broadcaster_descriptor] = { "extended_broadcaster_descriptor", NULL, NULL },
+	[logo_transmission_descriptor] = { "logo_transmission_descriptor", NULL, NULL },
+	[basic_local_event_descriptor] = { "basic_local_event_descriptor", NULL, NULL },
+	[reference_descriptor] = { "reference_descriptor", NULL, NULL },
+	[node_relation_descriptor] = { "node_relation_descriptor", NULL, NULL },
+	[short_node_information_descriptor] = { "short_node_information_descriptor", NULL, NULL },
+	[STC_reference_descriptor] = { "STC_reference_descriptor", NULL, NULL },
+	[series_descriptor] = { "series_descriptor", NULL, NULL },
+	[event_group_descriptor] = { "event_group_descriptor", NULL, NULL },
+	[SI_parameter_descriptor] = { "SI_parameter_descriptor", NULL, NULL },
+	[broadcaster_Name_Descriptor] = { "broadcaster_Name_Descriptor", NULL, NULL },
+	[component_group_descriptor] = { "component_group_descriptor", NULL, NULL },
+	[SI_prime_TS_descriptor] = { "SI_prime_TS_descriptor", NULL, NULL },
+	[board_information_descriptor] = { "board_information_descriptor", NULL, NULL },
+	[LDT_linkage_descriptor] = { "LDT_linkage_descriptor", NULL, NULL },
+	[connected_transmission_descriptor] = { "connected_transmission_descriptor", NULL, NULL },
+	[content_availability_descriptor] = { "content_availability_descriptor", NULL, NULL },
+	[service_group_descriptor] = { "service_group_descriptor", NULL, NULL },
+	[carousel_compatible_composite_Descriptor] = { "carousel_compatible_composite_Descriptor", NULL, NULL },
+	[conditional_playback_descriptor] = { "conditional_playback_descriptor", NULL, NULL },
+	[ISDBT_delivery_system_descriptor] = { "ISDBT_delivery_system_descriptor", NULL, NULL },
+	[partial_reception_descriptor] = { "partial_reception_descriptor", NULL, NULL },
+	[emergency_information_descriptor] = { "emergency_information_descriptor", NULL, NULL },
+	[data_component_descriptor] = { "data_component_descriptor", NULL, NULL },
+	[system_management_descriptor] = { "system_management_descriptor", NULL, NULL },
 };
 
 static const char *extension_descriptors[] = {
diff --git a/lib/libdvbv5/descriptors/header.c b/lib/libdvbv5/descriptors/header.c
index 48b4cc7..d371eec 100644
--- a/lib/libdvbv5/descriptors/header.c
+++ b/lib/libdvbv5/descriptors/header.c
@@ -30,7 +30,7 @@ int dvb_table_header_init(struct dvb_table_header *t)
 	return 0;
 }
 
-void dvb_table_header_print(struct dvb_v5_fe_parms *parms, struct dvb_table_header *t)
+void dvb_table_header_print(struct dvb_v5_fe_parms *parms, const struct dvb_table_header *t)
 {
 	dvb_log("| table_id       %d", t->table_id);
 	dvb_log("| section_length %d", t->section_length);
diff --git a/lib/libdvbv5/descriptors/language.c b/lib/libdvbv5/descriptors/language.c
new file mode 100644
index 0000000..018007d
--- /dev/null
+++ b/lib/libdvbv5/descriptors/language.c
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2011-2012 - Mauro Carvalho Chehab <mchehab@redhat.com>
+ * Copyright (c) 2012 - Andre Roth <neolynx@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation version 2
+ * of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ *
+ */
+
+#include "descriptors/language.h"
+#include "descriptors.h"
+#include "dvb-fe.h"
+
+ssize_t dvb_desc_language_init(const uint8_t *buf, struct dvb_desc *desc)
+{
+	dvb_desc_init(buf, desc);
+	struct dvb_desc_language *lang = (struct dvb_desc_language *) desc;
+	lang->language[0] = buf[2];
+	lang->language[1] = buf[3];
+	lang->language[2] = buf[4];
+	lang->language[3] = '\0';
+	lang->audio_type  = buf[5];
+	return sizeof(struct dvb_desc_language);
+}
+
+void dvb_desc_language_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc)
+{
+	const struct dvb_desc_language *lang = (const struct dvb_desc_language *) desc;
+	dvb_log("|                   lang: %s (type: %d)", lang->language, lang->audio_type);
+}
+
diff --git a/lib/libdvbv5/descriptors/nit.c b/lib/libdvbv5/descriptors/nit.c
new file mode 100644
index 0000000..05cecdf
--- /dev/null
+++ b/lib/libdvbv5/descriptors/nit.c
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) 2011-2012 - Mauro Carvalho Chehab <mchehab@redhat.com>
+ * Copyright (c) 2012 - Andre Roth <neolynx@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation version 2
+ * of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ *
+ */
+
+#include "descriptors/nit.h"
+#include "descriptors.h"
+#include "dvb-fe.h"
+
+void *dvb_table_nit_init(const uint8_t *buf, ssize_t size)
+{
+	struct dvb_table_nit *nit = malloc(size + sizeof(uint16_t));
+	memcpy(nit, buf, sizeof(struct dvb_table_nit) - sizeof(uint16_t));
+
+	dvb_table_header_init(&nit->header);
+	bswap16(nit->bitfield);
+
+	printf("nit size: %d\n", (int)size);
+	union dvb_table_nit_transport_header *h = (union dvb_table_nit_transport_header *)
+					  (buf + sizeof(struct dvb_table_nit) - sizeof(uint16_t) + nit->desc_length);
+	bswap16(h->bitfield);
+
+	printf("got transport len: %d\n", h->transport_length);
+
+	uint8_t *p = (uint8_t *) h;
+	p += sizeof(union dvb_table_nit_transport_header);
+
+	int i = 0;
+	while ((uint8_t *) p < buf + size - 4) {
+		memcpy(nit->transport + i, p, sizeof(struct dvb_table_nit_transport));
+		bswap16(nit->transport[i].transport_id);
+		bswap16(nit->transport[i].network_id);
+		bswap16(nit->transport[i].bitfield);
+		p += sizeof(struct dvb_table_nit_transport);
+		p += nit->transport[i].desc_length;
+		i++;
+	}
+	nit->transports = i;
+	return nit;
+}
+
+void dvb_table_nit_print(struct dvb_v5_fe_parms *parms, struct dvb_table_nit *t)
+{
+	dvb_log("NIT");
+	dvb_table_header_print(parms, &t->header);
+	dvb_log("| desc_length   %d", t->desc_length);
+	dvb_log("|\\  transport_id  network_id (%d transports)", t->transports);
+	int i;
+	for (i = 0; i < t->transports; i++) {
+		dvb_log("|- %7d %7d", t->transport[i].transport_id, t->transport[i].network_id);
+	}
+}
+
diff --git a/lib/libdvbv5/descriptors/pat.c b/lib/libdvbv5/descriptors/pat.c
index 4f27101..eb1b307 100644
--- a/lib/libdvbv5/descriptors/pat.c
+++ b/lib/libdvbv5/descriptors/pat.c
@@ -23,31 +23,35 @@
 #include "descriptors.h"
 #include "dvb-fe.h"
 
-int dvb_table_pat_init(unsigned char *buf, ssize_t size)
+void *dvb_table_pat_init(const uint8_t *buf, ssize_t size)
 {
-	struct dvb_table_pat *t = (struct dvb_table_pat *) buf;
-	int r = dvb_table_header_init(&t->header);
-	if (r != 0)
-		return r;
-	t->info.entries = 0;
-	struct dvb_table_pat_entry *p = t->entry;
-	while((uint8_t *) p < (uint8_t *) t + size - 4) {
-		bswap16(p->program_id);
-		bswap16(p->bitfield);
+	struct dvb_table_pat *pat = malloc(size + sizeof(uint16_t));
+	memcpy(pat, buf, sizeof(struct dvb_table_pat) - sizeof(uint16_t));
+
+	dvb_table_header_init(&pat->header);
+
+	struct dvb_table_pat_program *p = (struct dvb_table_pat_program *)
+		                          (buf + sizeof(struct dvb_table_pat) - sizeof(uint16_t));
+	int i = 0;
+	while ((uint8_t *) p < buf + size - 4) {
+		memcpy(pat->program + i, p, sizeof(struct dvb_table_pat_program));
+		bswap16(pat->program[i].program_id);
+		bswap16(pat->program[i].bitfield);
 		p++;
-		t->info.entries++;
+		i++;
 	}
-	return 0;
+	pat->programs = i;
+	return pat;
 }
 
 void dvb_table_pat_print(struct dvb_v5_fe_parms *parms, struct dvb_table_pat *t)
 {
-	dvb_log("PAT" );
+	dvb_log("PAT");
 	dvb_table_header_print(parms, &t->header);
-	dvb_log("|\\   pid     program_id (%d entries)", t->info.entries);
+	dvb_log("|\\   pid     program_id (%d programs)", t->programs);
 	int i;
-	for (i = 0; i < t->info.entries; i++) {
-		dvb_log("|- %7d %7d", t->entry[i].pid, t->entry[i].program_id);
+	for (i = 0; i < t->programs; i++) {
+		dvb_log("|- %7d %7d", t->program[i].pid, t->program[i].program_id);
 	}
 }
 
diff --git a/lib/libdvbv5/descriptors/pmt.c b/lib/libdvbv5/descriptors/pmt.c
index 1878858..fe0ae6b 100644
--- a/lib/libdvbv5/descriptors/pmt.c
+++ b/lib/libdvbv5/descriptors/pmt.c
@@ -20,105 +20,84 @@
  */
 
 #include "descriptors/pmt.h"
-#include "descriptors.h"
 #include "dvb-fe.h"
 
 #include <string.h> /* memcpy */
-#include <stdio.h>
 
-int dvb_table_pmt_init(uint8_t *ptr, ssize_t size)
+void *dvb_table_pmt_init(const uint8_t *buf, ssize_t size)
 {
-	struct dvb_table_pmt *t = (struct dvb_table_pmt *) ptr;
-	int r = dvb_table_header_init(&t->header);
-	if (r != 0)
-		return r;
-	bswap16(t->bitfield2);
-	bswap16(t->bitfield3);
+	uint8_t *d = malloc(DVB_MAX_PAYLOAD_PACKET_SIZE * 2);
+	const uint8_t *p = buf;
 
-	/* temporary mem for holding the entries */
-	/* - filled with dvb_table_pmt_entry from the beginning */
-	/* - filled with info from the end */
-	uint8_t *tmp = malloc(size);
-	struct dvb_table_pmt_entry *entries = (struct dvb_table_pmt_entry *) tmp;
-	uint8_t *infoptr = tmp + size - 1;
+	struct dvb_table_pmt *pmt = (struct dvb_table_pmt *) d;
 
-	t->info.entries = 0;
-	uint8_t *p = ptr + sizeof(struct dvb_table_pmt);
-	p += t->prog_length;
-	while ( p < ptr + size - 4) {
-		struct dvb_table_pmt_prog *prog = (struct dvb_table_pmt_prog *) p;
-		bswap16(prog->bitfield);
-		bswap16(prog->bitfield2);
-		int len = prog->info_length;
-		if (p + prog->desc_length > ptr + size - 4) {
-			printf( "wrong descriptor length: %d\n", prog->desc_length );
-			prog->desc_length = ptr + size - 4 - p;
-		}
-		if (len > prog->desc_length - 2) // type, len
-			len = 0;
-		else {
-			infoptr -= len;
-			memcpy(infoptr, prog->info, len);
-		}
-		infoptr[len] = '\0';
-		entries[t->info.entries].type           = prog->stream_type;
-		entries[t->info.entries].elementary_pid = prog->elementary_pid;
-		entries[t->info.entries].info           = infoptr;
+	memcpy(pmt, p, sizeof(struct dvb_table_pmt) - sizeof(pmt->stream));
+	p += sizeof(struct dvb_table_pmt) - sizeof(pmt->stream);
+	d += sizeof(struct dvb_table_pmt);
 
-		printf("elemenary pid %d\n", entries[t->info.entries].elementary_pid);
-		printf("desc_length   %d\n", prog->desc_length);
-		printf("type          %d (%s)\n", entries[t->info.entries].type, dvb_descriptors[entries[t->info.entries].type].name);
-		printf("info_length   %d\n", prog->info_length);
-		printf("info: '%s'\n", entries[t->info.entries].info);
+	dvb_table_header_init(&pmt->header);
+	bswap16(pmt->bitfield);
+	bswap16(pmt->bitfield2);
+	pmt->stream = NULL;
 
-		infoptr -= 1;
-		t->info.entries++;
-		p += sizeof( struct dvb_table_pmt_prog ) + prog->info_length;
-	}
+	/* skip prog section */
+	p += pmt->prog_length;
 
-	/* copy temp info back to original buffer */
-	int i;
-	printf( "BUFFER: %p - %p, size: %d, sizeof pmt: %d, entries: %d, sizeof pmtentry: %d\n", p, p + size, (int) size, (int)sizeof(struct dvb_table_pmt), t->info.entries, (int)sizeof(struct dvb_table_pmt_entry) );
-	infoptr = p + sizeof(struct dvb_table_pmt) +
-			t->info.entries * sizeof(struct dvb_table_pmt_entry);
-	for (i = 0; i < t->info.entries; i++ ) {
-		printf( "INFOPTR: %p\n", infoptr);
-		if (infoptr > p + size)
-		{
-			printf( "BUFFER OVERFLOW!\n" );
-		}
-		t->entry[i].elementary_pid = entries[i].elementary_pid;
-		t->entry[i].type = entries[i].type;
-		t->entry[i].info = infoptr;
-		printf( "COPYING:::::::::::::::::::\n" );
-		int j;
-		for( j = 0; ; j++ )
-		{
-			printf( "char %c (%d)\n", entries[i].info[j], (int) entries[i].info[j]);
-			if( entries[i].info[j] == '\0' )
-				break;
-		}
-		strcpy((char *) t->entry[i].info, (char *) entries[i].info);
-		infoptr += strlen((char *) t->entry[i].info) + 1;
+	/* get the stream entries */
+	struct dvb_table_pmt_stream *last_stream = NULL;
+	struct dvb_table_pmt_stream **head_stream = &pmt->stream;
+	while (p < buf + size - 4) {
+		struct dvb_table_pmt_stream *stream = (struct dvb_table_pmt_stream *) d;
+		memcpy(d, p, sizeof(struct dvb_table_pmt_stream) - sizeof(stream->descriptor) - sizeof(stream->next));
+		p += sizeof(struct dvb_table_pmt_stream) - sizeof(stream->descriptor) - sizeof(stream->next);
+		d += sizeof(struct dvb_table_pmt_stream);
+
+		bswap16(stream->bitfield);
+		bswap16(stream->bitfield2);
+		stream->descriptor = NULL;
+		stream->next = NULL;
+
+		if(!*head_stream)
+			*head_stream = stream;
+		if(last_stream)
+			last_stream->next = stream;
+
+		/* get the descriptors for each program */
+		struct dvb_desc **head_desc = &stream->descriptor;
+		d += dvb_parse_descriptor(p, d, stream->section_length, head_desc);
+
+		p += stream->section_length;
+		last_stream = stream;
 	}
-	free(tmp);
-	return 0;
+
+	// FIXME: realloc
+	return pmt;
 }
 
-void dvb_table_pmt_print(struct dvb_v5_fe_parms *parms, struct dvb_table_pmt *t)
+void dvb_table_pmt_print(struct dvb_v5_fe_parms *parms, const struct dvb_table_pmt *pmt)
 {
 	dvb_log( "PMT" );
-	dvb_table_header_print(parms, &t->header);
-	dvb_log( "|- pcr_pid       %d", t->pcr_pid );
-	dvb_log( "|  reserved2     %d", t->reserved2 );
-	dvb_log( "|  prog length   %d", t->prog_length );
-	dvb_log( "|  zero3         %d", t->zero3 );
-	dvb_log( "|  reserved3     %d", t->reserved3 );
-	/*int i;*/
-	/*for (i = 0; i < t->info.entries; i++) {*/
-		/*dvb_log("|-  elementary_pid %d", t->entry[i].elementary_pid);*/
-		/*dvb_log("|   type           %d (%s)", t->entry[i].type, dvb_descriptor_names[t->entry[i].type]);*/
-		/*dvb_log("|   info          '%s'", t->entry[i].info);*/
-	/*}*/
+	dvb_table_header_print(parms, &pmt->header);
+	dvb_log( "|- pcr_pid       %d", pmt->pcr_pid );
+	dvb_log( "|  reserved2     %d", pmt->reserved2 );
+	dvb_log( "|  prog length   %d", pmt->prog_length );
+	dvb_log( "|  zero3         %d", pmt->zero3 );
+	dvb_log( "|  reserved3     %d", pmt->reserved3 );
+	dvb_log("|\\  pid     len   type");
+	const struct dvb_table_pmt_stream *stream = pmt->stream;
+	uint16_t streams = 0;
+	while(stream) {
+		dvb_log("|- %5d    %4d  %s (%d)", stream->elementary_pid, stream->section_length,
+				dvb_descriptors[stream->type].name, stream->type);
+		struct dvb_desc *desc = stream->descriptor;
+		while (desc) {
+			if (dvb_descriptors[desc->type].print)
+				dvb_descriptors[desc->type].print(parms, desc);
+			desc = desc->next;
+		}
+		stream = stream->next;
+		streams++;
+	}
+	dvb_log("|_  %d streams", streams);
 }
 
-- 
1.7.9.5

