From fec291eeee12920b2588853d959072e84215cf5b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Roth?= <neolynx@gmail.com>
Date: Mon, 17 Nov 2014 20:45:41 +0100
Subject: [PATCH 09/12] libdvbv5: suport time offset table (TOT)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Andr√© Roth <neolynx@gmail.com>
---
 lib/include/libdvbv5/tot.h | 107 +++++++++++++++++++++++++++++++++++++++++++++
 lib/libdvbv5/Makefile.am   |   2 +
 lib/libdvbv5/descriptors.c |   2 +
 lib/libdvbv5/tables/tot.c  | 100 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 211 insertions(+)
 create mode 100644 lib/include/libdvbv5/tot.h
 create mode 100644 lib/libdvbv5/tables/tot.c

diff --git a/lib/include/libdvbv5/tot.h b/lib/include/libdvbv5/tot.h
new file mode 100644
index 0000000..e6701c7
--- /dev/null
+++ b/lib/include/libdvbv5/tot.h
@@ -0,0 +1,107 @@
+/*
+ * Copyright (c) 2014 - Andre Roth <neolynx@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation version 2
+ * of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ *
+ */
+
+/**
+ * @file tot.h
+ * @ingroup dvb_table
+ * @brief Provides the table parser for the TOT (Time Offset Table)
+ * @copyright GNU General Public License version 2 (GPLv2)
+ * @author Andre Roth
+ *
+ * @par Bug Report
+ * Please submit bug reports and patches to linux-media@vger.kernel.org
+ */
+
+#ifndef _TOT_H
+#define _TOT_H
+
+#include <stdint.h>
+#include <unistd.h> /* ssize_t */
+
+#include <libdvbv5/header.h>
+
+/**
+ * @def DVB_TABLE_TOT
+ *	@brief DVB TOT table ID
+ * 	@ingroup dvb_table
+ * @def DVB_TABLE_TOT_PID
+ *	@brief DVB PID table ID
+ * 	@ingroup dvb_table
+ */
+#define DVB_TABLE_TOT      0x73
+#define DVB_TABLE_TOT_PID  0x0014
+
+/**
+ * @struct dvb_table_tot
+ * @brief DVB TOT table
+ *
+ * @param header	struct dvb_table_header content
+ * @param descriptor	pointer to struct dvb_desc
+ */
+struct dvb_table_tot {
+	struct dvb_table_header_datetime header;
+	struct dvb_desc *descriptor;
+} __attribute__((packed));
+
+struct dvb_v5_fe_parms;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * @brief Initializes and parses TOT table
+ *
+ * @param parms	struct dvb_v5_fe_parms pointer to the opened device
+ * @param buf buffer containing the TOT raw data
+ * @param buflen length of the buffer
+ * @param table pointer to struct dvb_table_tot to be allocated and filled
+ *
+ * This function allocates an TOT table and fills the fields inside
+ * the struct. It also makes sure that all fields will follow the CPU
+ * endianness. Due to that, the content of the buffer may change.
+ *
+ * @return On success, it returns the size of the allocated struct.
+ *	   A negative value indicates an error.
+ */
+ssize_t dvb_table_tot_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
+			   ssize_t buflen, struct dvb_table_tot **table);
+
+/**
+ * @brief Frees all data allocated by the TOT table parser
+ *
+ * @param table pointer to struct dvb_table_tot to be freed
+ */
+void dvb_table_tot_free(struct dvb_table_tot *table);
+
+/**
+ * @brief Prints the content of the TOT table
+ *
+ * @param parms	struct dvb_v5_fe_parms pointer to the opened device
+ * @param table pointer to struct dvb_table_tot
+ */
+void dvb_table_tot_print(struct dvb_v5_fe_parms *parms,
+			 struct dvb_table_tot *table);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/lib/libdvbv5/Makefile.am b/lib/libdvbv5/Makefile.am
index 1f91cd5..56ba95b 100644
--- a/lib/libdvbv5/Makefile.am
+++ b/lib/libdvbv5/Makefile.am
@@ -44,6 +44,7 @@ otherinclude_HEADERS = \
 	../include/libdvbv5/eit.h \
 	../include/libdvbv5/cat.h \
 	../include/libdvbv5/atsc_eit.h \
+	../include/libdvbv5/tot.h \
 	../include/libdvbv5/mpeg_ts.h \
 	../include/libdvbv5/mpeg_pes.h \
 	../include/libdvbv5/mpeg_es.h
@@ -84,6 +85,7 @@ libdvbv5_la_SOURCES = \
 	tables/eit.c		\
 	tables/cat.c		\
 	tables/atsc_eit.c	\
+	tables/tot.c		\
 	tables/mpeg_ts.c	\
 	tables/mpeg_pes.c	\
 	tables/mpeg_es.c	\
diff --git a/lib/libdvbv5/descriptors.c b/lib/libdvbv5/descriptors.c
index b3915f1..265b672 100644
--- a/lib/libdvbv5/descriptors.c
+++ b/lib/libdvbv5/descriptors.c
@@ -37,6 +37,7 @@
 #include <libdvbv5/eit.h>
 #include <libdvbv5/vct.h>
 #include <libdvbv5/mgt.h>
+#include <libdvbv5/tot.h>
 #include <libdvbv5/atsc_eit.h>
 #include <libdvbv5/desc_language.h>
 #include <libdvbv5/desc_network_name.h>
@@ -142,6 +143,7 @@ struct dvb_initializer dvb_table_initializers[256] = {
 	[DVB_TABLE_SDT]          = TABLE_INIT(dvb_table_sdt),
 	[DVB_TABLE_EIT]          = TABLE_INIT(dvb_table_eit),
 	[DVB_TABLE_EIT_SCHEDULE] = TABLE_INIT(dvb_table_eit),
+	[DVB_TABLE_TOT]          = TABLE_INIT2(dvb_table_tot, dvb_parse_section_datetime),
 	[ATSC_TABLE_MGT]         = TABLE_INIT(atsc_table_mgt),
 	[ATSC_TABLE_EIT]         = TABLE_INIT(atsc_table_eit),
 	[ATSC_TABLE_TVCT]        = TABLE_INIT(atsc_table_vct),
diff --git a/lib/libdvbv5/tables/tot.c b/lib/libdvbv5/tables/tot.c
new file mode 100644
index 0000000..8e85b00
--- /dev/null
+++ b/lib/libdvbv5/tables/tot.c
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2014 - Andre Roth <neolynx@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation version 2
+ * of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ *
+ */
+
+#include <libdvbv5/tot.h>
+#include <libdvbv5/descriptors.h>
+#include <libdvbv5/dvb-fe.h>
+
+ssize_t dvb_table_tot_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
+		ssize_t buflen, struct dvb_table_tot **table)
+{
+	const uint8_t *p = buf, *endbuf = buf + buflen;
+	struct dvb_table_tot *tot;
+	struct dvb_desc **head_desc;
+	size_t size;
+
+	size = offsetof(struct dvb_table_tot, descriptor);
+	if (p + size > endbuf) {
+		dvb_logerr("%s: short read %zd/%zd bytes", __func__,
+			   endbuf - p, size);
+		return -1;
+	}
+
+	if (buf[0] != DVB_TABLE_TOT) {
+		dvb_logerr("%s: invalid marker 0x%02x, sould be 0x%02x",
+				__func__, buf[0], DVB_TABLE_TOT);
+		return -2;
+	}
+
+	if (!*table) {
+		*table = calloc(sizeof(struct dvb_table_tot), 1);
+		if (!*table) {
+			dvb_logerr("%s: out of memory", __func__);
+			return -3;
+		}
+	}
+	tot = *table;
+	memcpy(tot, p, size);
+	p += size;
+	dvb_table_header_datetime_init(&tot->header);
+
+	/* find end of current lists */
+	head_desc = &tot->descriptor;
+	while (*head_desc != NULL)
+		head_desc = &(*head_desc)->next;
+
+	size = tot->header.desc_length;
+	if (p + size > endbuf) {
+		dvb_logerr("%s: short read %zd/%zd bytes", __func__,
+			   endbuf - p, size);
+		return -4;
+	}
+	endbuf = p + size;
+
+	/* parse the descriptors */
+	if (endbuf > p) {
+		uint16_t desc_length = endbuf - p;
+		if (dvb_desc_parse(parms, p, desc_length,
+				      head_desc) != 0) {
+			return -5;
+		}
+		p += desc_length;
+	}
+
+	if (endbuf - p)
+		dvb_logwarn("%s: %zu spurious bytes at the end",
+			   __func__, endbuf - p);
+
+	return p - buf;
+}
+
+void dvb_table_tot_free(struct dvb_table_tot *tot)
+{
+	dvb_desc_free((struct dvb_desc **) &tot->descriptor);
+	free(tot);
+}
+
+void dvb_table_tot_print(struct dvb_v5_fe_parms *parms, struct dvb_table_tot *tot)
+{
+	dvb_loginfo("TOT");
+	dvb_table_header_datetime_print(parms, &tot->header);
+	dvb_desc_print(parms, tot->descriptor);
+}
+
-- 
1.8.3.2

