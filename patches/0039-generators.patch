From f36c75398149f7c2dc6b4db056e2c5498b702518 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Roth?= <neolynx@gmail.com>
Date: Sat, 22 Feb 2014 18:51:32 +0100
Subject: [PATCH 39/40] generators

---
 lib/include/libdvbv5/desc_service.h     |    2 +-
 lib/include/libdvbv5/descriptors.h      |    6 +-
 lib/libdvbv5/descriptors.c              |    5 +-
 lib/libdvbv5/descriptors/desc_service.c |  101 +++++++++++++++++++++++++++----
 lib/libdvbv5/descriptors/header.c       |    1 +
 lib/libdvbv5/descriptors/pat.c          |    2 +-
 lib/libdvbv5/descriptors/sdt.c          |    2 +-
 lib/libdvbv5/dvb-scan.c                 |    4 +-
 lib/libdvbv5/parse_string.c             |    7 ++-
 lib/libdvbv5/parse_string.h             |    2 +-
 10 files changed, 108 insertions(+), 24 deletions(-)

diff --git a/lib/include/libdvbv5/desc_service.h b/lib/include/libdvbv5/desc_service.h
index 9089efa..c6dac33 100644
--- a/lib/include/libdvbv5/desc_service.h
+++ b/lib/include/libdvbv5/desc_service.h
@@ -44,7 +44,7 @@ int dvb_desc_service_init (struct dvb_v5_fe_parms *parms, const uint8_t *buf, st
 void dvb_desc_service_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
 struct dvb_desc *dvb_desc_service_create();
 void dvb_desc_service_calcsize(struct dvb_desc *desc);
-void dvb_desc_service_store(struct dvb_desc *desc, uint8_t *data);
+void dvb_desc_service_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data);
 void dvb_desc_service_free (struct dvb_desc *desc);
 
 #ifdef __cplusplus
diff --git a/lib/include/libdvbv5/descriptors.h b/lib/include/libdvbv5/descriptors.h
index 824fd3d..6452c68 100644
--- a/lib/include/libdvbv5/descriptors.h
+++ b/lib/include/libdvbv5/descriptors.h
@@ -54,6 +54,8 @@ extern char *output_charset;
 	b = ntohl(b); \
 } while (0)
 
+#define DVB_DESC_HEADER_SIZE 2
+
 #define DVB_DESC_HEADER() \
 	uint8_t type; \
 	uint8_t length; \
@@ -86,7 +88,7 @@ void dvb_free_descriptors(struct dvb_desc **list);
 void dvb_desc_print(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc);
 struct dvb_desc *dvb_desc_create(struct dvb_v5_fe_parms *parms, uint8_t type, struct dvb_desc **list);
 ssize_t dvb_desc_calcsize(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc);
-int dvb_desc_store(struct dvb_desc *desc, uint8_t *data);
+int dvb_desc_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data);
 
 #ifdef __cplusplus
 }
@@ -98,7 +100,7 @@ typedef int (*dvb_desc_init_func) (struct dvb_v5_fe_parms *parms, const uint8_t
 typedef void (*dvb_desc_print_func)(struct dvb_v5_fe_parms *parms, const struct dvb_desc *desc);
 typedef void (*dvb_desc_free_func) (struct dvb_desc *desc);
 typedef void (*dvb_desc_calcsize_func) (struct dvb_desc *desc);
-typedef void (*dvb_desc_store_func) (struct dvb_desc *desc, uint8_t *data);
+typedef void (*dvb_desc_store_func) (struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data);
 typedef struct dvb_desc *(*dvb_desc_create_func) ();
 
 struct dvb_descriptor {
diff --git a/lib/libdvbv5/descriptors.c b/lib/libdvbv5/descriptors.c
index 8e24cc6..d7060d0 100644
--- a/lib/libdvbv5/descriptors.c
+++ b/lib/libdvbv5/descriptors.c
@@ -228,20 +228,21 @@ ssize_t dvb_desc_calcsize(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc)
 			return -1;
 		}
 		calcsize(desc);
+		size += DVB_DESC_HEADER_SIZE;
 		size += desc->length;
 		desc = desc->next;
 	}
 	return size;
 }
 
-int dvb_desc_store(struct dvb_desc *desc, uint8_t *data)
+int dvb_desc_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data)
 {
 	while (desc) {
 		dvb_desc_store_func store = dvb_descriptors[desc->type].store;
 		if (!store) {
 			return -1;
 		}
-		store(desc, data);
+		store(parms, desc, data);
 		desc = desc->next;
 	}
 	return 0;
diff --git a/lib/libdvbv5/descriptors/desc_service.c b/lib/libdvbv5/descriptors/desc_service.c
index 83de5b9..5b6d0f5 100644
--- a/lib/libdvbv5/descriptors/desc_service.c
+++ b/lib/libdvbv5/descriptors/desc_service.c
@@ -26,27 +26,59 @@
 int dvb_desc_service_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf, struct dvb_desc *desc)
 {
 	struct dvb_desc_service *service = (struct dvb_desc_service *) desc;
+	const uint8_t *endbuf = buf + desc->length;
 	uint8_t len;        /* the length of the string in the input data */
 	uint8_t len1, len2; /* the lenght of the output strings */
 
+	service->provider = NULL;
+	service->provider_emph = NULL;
+	service->name = NULL;
+	service->name_emph = NULL;
+
+	if (buf + 1 > endbuf) {
+		dvb_logerr("%s: short read %d bytes", __func__, 1);
+		return -1;
+	}
 	service->service_type = buf[0];
 	buf++;
 
-	service->provider = NULL;
-	service->provider_emph = NULL;
+	if (buf + 1 > endbuf) {
+		dvb_logerr("%s: a short read %d bytes", __func__, 1);
+		return -1;
+	}
+
 	len = buf[0];
-	buf++;
 	len1 = len;
-	parse_string(parms, &service->provider, &service->provider_emph, buf, len1, default_charset, output_charset);
-	buf += len;
+	buf++;
+
+	if (buf + len > endbuf) {
+		dvb_logerr("%s: b short read %d bytes", __func__, len);
+		return -1;
+	}
+
+	if (len) {
+		parse_string(parms, &service->provider, &service->provider_emph, buf, len1, default_charset, output_charset);
+		buf += len;
+	}
+
+	if (buf + 1 > endbuf) {
+		dvb_logerr("%s: c short read %d bytes", __func__, 1);
+		return -1;
+	}
 
-	service->name = NULL;
-	service->name_emph = NULL;
 	len = buf[0];
 	len2 = len;
 	buf++;
-	parse_string(parms, &service->name, &service->name_emph, buf, len2, default_charset, output_charset);
-	buf += len;
+
+	if (buf + len > endbuf) {
+		dvb_logerr("%s: d short read %d bytes", __func__, len);
+		return -1;
+	}
+
+	if (len) {
+		parse_string(parms, &service->name, &service->name_emph, buf, len2, default_charset, output_charset);
+		buf += len;
+	}
 	return 0;
 }
 
@@ -63,8 +95,8 @@ void dvb_desc_service_print(struct dvb_v5_fe_parms *parms, const struct dvb_desc
 {
 	const struct dvb_desc_service *service = (const struct dvb_desc_service *) desc;
 	dvb_loginfo("|           service type  %d", service->service_type);
-	dvb_loginfo("|           name          '%s'", service->name);
 	dvb_loginfo("|           provider      '%s'", service->provider);
+	dvb_loginfo("|           name          '%s'", service->name);
 }
 
 struct dvb_desc *dvb_desc_service_create()
@@ -76,12 +108,57 @@ struct dvb_desc *dvb_desc_service_create()
 
 void dvb_desc_service_calcsize(struct dvb_desc *desc)
 {
-	desc->length = sizeof(struct dvb_desc);
+	const struct dvb_desc_service *service = (const struct dvb_desc_service *) desc;
+
+	desc->length = 1 + 2; /* service_type, 2 length bytes */
+
+	/* FIXME: use iconv size */
+	if (service->provider)
+		desc->length += strlen(service->provider);
+
+	if (service->name)
+		desc->length += strlen(service->name);
 }
 
-void dvb_desc_service_store(struct dvb_desc *desc, uint8_t *data)
+void dvb_desc_service_store(struct dvb_v5_fe_parms *parms, struct dvb_desc *desc, uint8_t *data)
 {
+	const struct dvb_desc_service *service = (const struct dvb_desc_service *) desc;
 	data[0] = desc->type;
 	data[1] = desc->length;
+	uint8_t *p = data + 2;
+
+	*p++ = service->service_type;
+
+	if (service->provider) {
+		int len = strlen(service->provider);
+		int buflen = len * 3;
+		char *buf = malloc(buflen);
+		iconv_to_charset(parms, buf, buflen,  (const unsigned char *) service->provider, len, "utf-8", default_charset);
+		int len2 = strlen(buf);
+		if (len2) {
+			*p++ = len2;
+			memcpy(p, buf, len2);
+			p += len2;
+		}
+		free(buf);
+	} else {
+		*p++ = 0;
+	}
+
+	if (service->name) {
+		int len = strlen(service->name);
+		int buflen = len * 3;
+		char *buf = malloc(buflen);
+		iconv_to_charset(parms, buf, buflen, (const unsigned char *) service->name, len, "utf-8", default_charset);
+		int len2 = strlen(buf);
+		if (len2) {
+			*p++ = len2;
+			memcpy(p, buf, len2);
+			p += len2;
+		}
+		free(buf);
+	} else {
+		*p++ = 0;
+	}
 }
 
diff --git a/lib/libdvbv5/descriptors/header.c b/lib/libdvbv5/descriptors/header.c
index 5febb09..b5dc73a 100644
--- a/lib/libdvbv5/descriptors/header.c
+++ b/lib/libdvbv5/descriptors/header.c
@@ -26,6 +26,7 @@
 int dvb_table_header_init(struct dvb_table_header *t)
 {
 	bswap16(t->bitfield);
+	printf( "dvb_table_header_init %04x\n", t->bitfield);
 	bswap16(t->id);
 	return 0;
 }
diff --git a/lib/libdvbv5/descriptors/pat.c b/lib/libdvbv5/descriptors/pat.c
index 5c24a60..f02e9f0 100644
--- a/lib/libdvbv5/descriptors/pat.c
+++ b/lib/libdvbv5/descriptors/pat.c
@@ -61,7 +61,7 @@ ssize_t dvb_table_pat_init(struct dvb_v5_fe_parms *parms, const uint8_t *buf,
 
 		prog = malloc(sizeof(struct dvb_table_pat_program));
 		if (!prog) {
-			dvb_perror("Out of memory");
+			dvb_logerr("%s: out of memory", __func__);
 			return -2;
 		}
 
diff --git a/lib/libdvbv5/descriptors/sdt.c b/lib/libdvbv5/descriptors/sdt.c
index 50f465a..75698e1 100644
--- a/lib/libdvbv5/descriptors/sdt.c
+++ b/lib/libdvbv5/descriptors/sdt.c
@@ -204,7 +204,7 @@ ssize_t dvb_table_sdt_store(struct dvb_v5_fe_parms *parms, struct dvb_table_sdt
 		memcpy(p, service, size);
 		p += size;
 
-		p += dvb_desc_store(service->descriptor, p);
+		p += dvb_desc_store(parms, service->descriptor, p);
 
 		service = service->next;
 	}
diff --git a/lib/libdvbv5/dvb-scan.c b/lib/libdvbv5/dvb-scan.c
index 31a246e..99fffa2 100644
--- a/lib/libdvbv5/dvb-scan.c
+++ b/lib/libdvbv5/dvb-scan.c
@@ -183,12 +183,12 @@ int dvb_read_section_with_id(struct dvb_v5_fe_parms *parms, int dmx_fd,
 			return -3;
 		}
 
-		h = (struct dvb_table_header *)buf;
+		h = (struct dvb_table_header *) buf;
 		// FIXME: atsc_table_header_init
 		dvb_table_header_init(h);
 
 		if (start_id == h->id && start_section == h->section_id) {
-			dvb_logdbg( "dvb_read_section: section repeated, reading done" );
+			dvb_logdbg("dvb_read_section: section repeated, reading done");
 			break;
 		}
 		if (start_id == -1)
diff --git a/lib/libdvbv5/parse_string.c b/lib/libdvbv5/parse_string.c
index 0e94cf2..0fd2a54 100644
--- a/lib/libdvbv5/parse_string.c
+++ b/lib/libdvbv5/parse_string.c
@@ -300,7 +300,7 @@ static struct charset_conv en300468_latin_00_to_utf8[256] = {
 	[0xff] = { 2, {0xc2, 0xad, } },
 };
 
-void iconv_to_charset(struct dvb_v5_fe_parms *parms,
+size_t iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		      char *dest,
 		      size_t destlen,
 		      const unsigned char *src,
@@ -317,6 +317,7 @@ void iconv_to_charset(struct dvb_v5_fe_parms *parms,
 	if (cd == (iconv_t)(-1)) {
 		memcpy(p, src, len);
 		p[len] = '\0';
+		destlen = len;
 		dvb_logerr("Conversion from %s to %s not supported\n",
 				type, output_charset);
 	} else {
@@ -324,6 +325,7 @@ void iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		iconv_close(cd);
 		*p = '\0';
 	}
+	return destlen;
 }
 
 static void charset_conversion(struct dvb_v5_fe_parms *parms, char **dest, const unsigned char *s,
@@ -362,8 +364,9 @@ static void charset_conversion(struct dvb_v5_fe_parms *parms, char **dest, const
 
 	/* Convert from original charset to the desired one */
 	if (need_conversion)
-		iconv_to_charset(parms, *dest, destlen, s, len, type,
+		destlen = iconv_to_charset(parms, *dest, destlen, s, len, type,
 				 output_charset);
+	/* FIXME: do something with destlen */
 }
 
 void parse_string(struct dvb_v5_fe_parms *parms, char **dest, char **emph,
diff --git a/lib/libdvbv5/parse_string.h b/lib/libdvbv5/parse_string.h
index 61d0ed4..4d838d0 100644
--- a/lib/libdvbv5/parse_string.h
+++ b/lib/libdvbv5/parse_string.h
@@ -19,7 +19,7 @@
 
 struct dvb_v5_fe_parms;
 
-void iconv_to_charset(struct dvb_v5_fe_parms *parms,
+size_t iconv_to_charset(struct dvb_v5_fe_parms *parms,
 		      char *dest,
 		      size_t destlen,
 		      const unsigned char *src,
-- 
1.7.10.4

