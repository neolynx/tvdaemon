#!/usr/bin/python
# -*- coding: utf-8 -*-

import urllib2
import json
import sys, os

# Need for the CLI core files
sys.path.insert( 0, os.path.join( os.path.dirname( os.path.abspath( __file__ )), "cli-core/src/" ))
from CLI         import *

server = "localhost"
port   = 7777

def rpc( url ):
  global server, port
  req = urllib2.Request( 'http://%s:%d'%( server, port ) + '/' + url )
  try:
    response = urllib2.urlopen(req)
  except urllib2.HTTPError, e:
    print e.code, url
    return None
  except urllib2.URLError, e:
    print "%s: http://%s:%d"%( e.reason.args[1], server, port )
    return None
  except Exception, e:
    print "Error: RPC failed"
    return None
  return json.loads( response.read( ))

class Root( ):
  def __init__( self, cli ):
    self.category = "root"
    self.cli = cli

    self.sources  = Sources ( cli )
    self.channels = Channels( cli )
    self.adapters = Adapters( cli )
    self.path_items = { "sources": self.sources,
                        "channels": self.channels,
                        "adapters": self.adapters }

class Adapters( ):
  def __init__( self, cli ):
    self.category = "adapters"
    self.cli = cli

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

  def update( self ):
    self.path_items = { }
    data = self.get( )
    if data:
      count = data["iTotalDisplayRecords"]
      for i in range( count ):
        self.path_items[data["aaData"][i][0]] = Adapter( self.cli, data["aaData"][i] )

  def get( self ):
    return rpc( 'tvd?c=adapter&a=list' )

  def cmd_ls( self ):
    data = self.get( )
    if data:
      count = data["iTotalDisplayRecords"]
      for i in range( count ):
        name = data["aaData"][i][0]

        sys.stdout.write( cf.bold_white( name ))
        sys.stdout.write( " " * ( 30 - len( name )))
        sys.stdout.write( "\n" )

  def cmd_delete( self, item, args, rawline ):
    """adapter||delete adapter"""
    print "not implemented"

class Adapter( ):
  def __init__( self, cli, data ):
    self.category = "adapter"
    self.cli = cli
    self.adapter_id = data[1]

    #self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

  def update( self ):
    self.path_items = { }
    data = self.get( )
    if data:
      count = data["iTotalDisplayRecords"]
      for i in range( count ):
        self.path_items[data["aaData"][i][0]] = Frontend( self.cli, self.adapter_id, data["aaData"][i] )

  def get( self ):
    return rpc( 'tvd?c=frontend&a=list&adapter=%d'%self.adapter_id )

  def cmd_ls( self ):
    data = self.get( )
    if data:
      count = data["iTotalDisplayRecords"]
      for i in range( count ):
        name = data["aaData"][i][0]

        sys.stdout.write( cf.bold_white( name ))
        sys.stdout.write( " " * ( 30 - len( name )))
        sys.stdout.write( "\n" )

  def cmd_delete( self, item, args, rawline ):
    """adapter||delete adapter"""
    print "not implemented"

class Frontend( ):
  def __init__( self, cli, adapter_id, data ):
    self.category = "frontend"
    self.cli = cli
    self.adapter_id  = adapter_id
    self.frontend_id = data[1]

    self.cli.RegisterItem( CLIItem( "addport", self.cmd_addport, category = self.category ))

  def update( self ):
    self.path_items = { }
    data = self.get( )
    if data:
      count = data["iTotalDisplayRecords"]
      for i in range( count ):
        self.path_items[data["aaData"][i][0]] = Port( self.cli, self.adapter_id, self.frontend_id, data["aaData"][i] )

  def get( self ):
    return rpc( 'tvd?c=port&a=list&adapter=%d&frontend=%d'%( self.adapter_id, self.frontend_id ))

  def cmd_ls( self ):
    data = self.get( )
    if data:
      count = data["iTotalDisplayRecords"]
      for i in range( count ):
        name = data["aaData"][i][0]

        sys.stdout.write( cf.bold_white( name ))
        sys.stdout.write( " " * ( 30 - len( name )))
        sys.stdout.write( "\n" )

  def cmd_addport( self, item, args, rawline ):
    """adapter||delete adapter"""
    print "not implemented"

class Port( ):
  def __init__( self, cli, adapter_id, frontend_id, data ):
    self.category = "port"
    self.cli = cli
    self.adapter_id  = adapter_id
    self.frontend_id = frontend_id
    self.port_id     = data[1]

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

  def update( self ):
    self.path_items = { }

  def cmd_delete( self, item, args, rawline ):
    """port||delete port"""
    print "not implemented"

class Channels( ):
  def __init__( self, cli ):
    self.category = "adapters"
    self.cli = cli
    self.types = { }
    self.get_types( )

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

  def update( self ):
    self.path_items = { }
    sources = self.get( )
    if sources:
      count = sources["iTotalDisplayRecords"]
      for i in range( count ):
        self.path_items[sources["aaData"][i][0]] = Source( self.cli, sources["aaData"][i] )

  def get( self ):
    return rpc( 'tvd?c=adapter&a=list' )

  def get_types( self ):
    self.types = { }
    types = rpc( 'tvd?c=adapter&a=types' )
    if types:
      for t in types:
        self.types[int(t)] = types[t]

  def cmd_ls( self ):
    sources = self.get( )
    if sources:
      count = sources["iTotalDisplayRecords"]
      for i in range( count ):
        source = sources["aaData"][i][0]
        source_id = sources["aaData"][i][1]
        source_type = sources["aaData"][i][2]

        sys.stdout.write( cf.bold_white( source ))
        sys.stdout.write( " " * ( 30 - len( source )))
        if self.types.has_key( source_type ):
          sys.stdout.write( self.types[source_type] )
        else:
          sys.stdout.write( "Unknown (%d)"%source_type )
        sys.stdout.write( "\n" )

  def cmd_delete( self, item, args, rawline ):
    """source||delete source"""
    print "not implemented"

class Sources( ):
  def __init__( self, cli ):
    self.category = "sources"
    self.cli = cli
    self.types = { }
    self.get_types( )

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))
    self.cli.RegisterItem( CLIItem( "add", self.cmd_add, category = self.category ))

  def update( self ):
    self.path_items = { }
    sources = self.get( )
    if sources:
      count = sources["iTotalDisplayRecords"]
      for i in range( count ):
        self.path_items[sources["aaData"][i][0]] = Source( self.cli, sources["aaData"][i] )

  def get( self ):
    return rpc( 'tvd?c=source&a=list' )

  def get_types( self ):
    types = rpc( 'tvd?c=source&a=types' )
    if types:
      for t in types:
        self.types[int(t)] = types[t]

  def cmd_ls( self ):
    sources = self.get( )
    if sources:
      count = sources["iTotalDisplayRecords"]
      for i in range( count ):
        source = sources["aaData"][i][0]
        source_id = sources["aaData"][i][1]
        source_type = sources["aaData"][i][2]

        sys.stdout.write( cf.bold_white( source.encode( 'utf8' )))
        sys.stdout.write( " " * ( 30 - len( source )))
        if self.types.has_key( source_type ):
          sys.stdout.write( self.types[source_type] )
        else:
          sys.stdout.write( "Unknown (%d)"%source_type )
        sys.stdout.write( "\n" )

  def cmd_delete( self, item, args, rawline ):
    """source||delete source"""
    print "not implemented"

  def cmd_add( self, item, args, rawline ):
    """source||add source"""
    print "not implemented"


class Source( ):
  def __init__( self, cli, data ):
    self.category = "source"
    self.cli = cli
    self.source_id = data[1]

    self.transponders = Transponders( cli, data )
    self.services = Services( cli, self, data )

  def update( self ):
    self.path_items = { "transponders": self.transponders,
                        "services":     self.services }

class Transponders( ):
  def __init__( self, cli, data ):
    self.category = "transponders"
    self.cli = cli
    self.source_id = data[1]

    self.states = { }
    self.get_states( )

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

    self.path_items = { }

  def get( self ):
    return rpc( 'tvd?c=transponder&a=list&source=%d'%self.source_id )

  def get_states( self ):
    self.states = { }
    states = rpc( 'tvd?c=transponder&a=states&source=%d'%self.source_id )
    if states:
      for s in states:
        self.states[int(s)] = states[s]

  def cmd_ls( self ):
    transponders = self.get( )
    if not transponders:
      return
    count = transponders["iTotalDisplayRecords"]
    for i in range( count ):
      name    = transponders["aaData"][i][0]
      id      = transponders["aaData"][i][1]
      state   = transponders["aaData"][i][2]
      enabled = int( transponders["aaData"][i][3] )

      sys.stdout.write( "   " )
      sys.stdout.write( cf.bold_white( name ))
      sys.stdout.write( " " * ( 52 - len( name )))
      statename = "Unknown"
      if self.states.has_key( state ):
        statename = self.states[state]
      sys.stdout.write( "%-10s "%statename )
      if enabled == 0:
        sys.stdout.write( " " * ( 15 - len( statename )))
        sys.stdout.write( "Disabled" );

      sys.stdout.write( "\n" )
    print "total: %d"%count

  def cmd_delete( self, item, args, rawline ):
    """transponder||delete transponder"""
    print "delete"

class Services( ):
  def __init__( self, cli, source, data ):
    self.category = "services"
    self.cli = cli
    self.source_id = data[1]
    self.source = source
    self.types = { }
    self.get_types( )

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

  #def update( self ):
    #self.path_items = { }
    #data = self.get( )
    #if data:
      #count = data["iTotalDisplayRecords"]
      #for i in range( count ):
        #self.path_items[data["aaData"][i][0]] = Service( self.cli, self.source_id, data["aaData"][i] )

  def get( self ):
    return rpc( 'tvd?c=service&a=list&source=%d'%self.source_id )

  def get_types( self ):
    self.types = { }
    types = rpc( 'tvd?c=service&a=types&source=%d'%self.source_id )
    if types:
      for t in types:
        self.types[int(t)] = types[t]

  def cmd_ls( self ):
    data = self.get( )
    if not data:
      return
    transponders = self.source.transponders.get( )
    count = data["iTotalDisplayRecords"]
    tvs = 0
    hds = 0
    radios = 0
    for i in range( count ):
      name = data["aaData"][i][0]
      id = data["aaData"][i][1]
      type = data["aaData"][i][2]
      transponder_id = data["aaData"][i][3]
      scrambled = data["aaData"][i][4]

      if type == 1:
        tvs += 1
      if type == 2:
        hds += 1
      if type == 3:
        radios += 1
      sys.stdout.write( "   " )
      sys.stdout.write( cf.bold_white( name.encode('utf8')))
      sys.stdout.write( " " * ( 30 - len( name )))
      if scrambled:
        sys.stdout.write( "§ " )
      else:
        sys.stdout.write( "  " )
      typename = "Unknown"
      if self.types.has_key( type ):
        typename = self.types[type]
      sys.stdout.write( "%-5s "%typename )
      sys.stdout.write( "%5d "%id )
      if transponders:
        transponder = None
        count2 = transponders["iTotalDisplayRecords"]
        for i in range( count2 ):
          if transponder_id == transponders["aaData"][i][1]:
            transponder = transponders["aaData"][i][0]
            break
        sys.stdout.write( "   %s"%transponder )
      sys.stdout.write( "\n" )
    print "total: %d   TV: %d HDTV: %d Radio: %d"%( count, tvs, hds, radios )

  def cmd_delete( self, item, args, rawline ):
    """service||delete transponder"""
    print "delete"

class TVDCLI( CLI ):
  def __init__( self ):
    CLI.__init__( self, "~/.tvdaemon/history" )
    self.confirm_exit = False
    self.SetWelcomeText( "TVDaemon - Command Line Interface" )
    self.SetPrompt( "TVD:%s> " )

    self.cd = self.GetItemByName( "cd" )
    self.root = Root( self )
    self.SetItemsEnabled( False )
    self.relocate( )

  def relocate( self ):
    loc = self._location.GetCurrentLocationValue( )
    if not loc:
      loc = self.root
    cat = "root"
    if hasattr( loc, "category" ):
      cat = loc.category
    self.SetItemsEnabledByCategories( cat, other_inverse = True )
    self._UpdateHelpItem( )
    if hasattr( loc, "update" ):
      loc.update( )
    self.cd.ClearItems( )
    if hasattr( loc, "path_items" ):
      for path in loc.path_items:
        self.cd.AppendItem( CLIItem( path, value = loc.path_items[path], tab_delimiter = "/" ))
    else:
      print "object has no path items:", loc

  def cmd_cd( self, item, args, rawline ):
    """[location|..]||change current location"""
    index = self._location.GetHierarchyIndex( )
    args = args.strip( )
    changed = False
    if args == "":
      self._location.GoToRoot( )
      changed = True
    elif args == "-":
      self._location.GoToLastLocation( )
      changed = True
    elif args[0] == "/":
      self._location.GoToRoot( )
      changed = True

    if changed:
      self.relocate( )

    paths = [s for s in args.split( self._location.Delimiter ) if s != ""]
    for path in paths:
      if path == "..":
        self._location.GoOneBack( )
        self.relocate( )
      elif path == ".":
        continue
      else:
        #index = self._location.GetHierarchyIndex( )
        loc = self._location.GetCurrentLocationValue( )
        if not loc:
          loc = self.root

        if hasattr( loc, "path_items" ):
          if path in loc.path_items:
            self._location.AppendLocation( path, loc.path_items[path] )
            self.relocate( )
          else:
            print "not such directory"
        else:
          print "object has no path_items"

  def cmd_ls( self, item, args = "", line = "" ):
    loc = self._location.GetCurrentLocationValue( )
    if not loc:
      loc = self.root
    if hasattr( loc, "cmd_ls" ):
      loc.cmd_ls( )
    elif hasattr( loc, "path_items" ):
      for path in loc.path_items:
        print "%s/"%path

if __name__ == "__main__":
  test = TVDCLI( )
  test.Start( )
  test.Stop( )

