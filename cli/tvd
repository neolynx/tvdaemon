#!/usr/bin/python

import urllib2
import json
import sys, os

# Need for the CLI core files
sys.path.insert( 0, os.path.join( os.path.dirname( os.path.abspath( __file__ )), "cli-core/src/" ))
from CLI         import *

class Root( ):
  def __init__( self, cli ):
    self.category = "root"
    self.cli = cli

    self.sources = Sources( cli )
    self.path_items = { "sources": self.sources,
                        "channels": None,
                        "adapters": None }

class Sources( ):
  def __init__( self, cli ):
    self.category = "sources"
    self.cli = cli
    self.types = { }
    self.get_types( )

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))
    self.cli.RegisterItem( CLIItem( "add", self.cmd_add, category = self.category ))

  def update( self ):
    self.path_items = { }
    sources = self.get( )
    if sources:
      count = sources["iTotalDisplayRecords"]
      for i in range( count ):
        self.path_items[sources["aaData"][i][0]] = Source( self.cli, sources["aaData"][i] )

  def get( self ):
    req = urllib2.Request('http://localhost:7777/tvd?c=source&a=list')
    try:
      response = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
      print e.code
      return None
    except urllib2.URLError, e:
      print e.args
      return None
    return json.loads( response.read( ))

  def get_types( self ):
    req = urllib2.Request('http://localhost:7777/tvd?c=source&a=types')
    try:
      response = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
      print e.code
      return
    except urllib2.URLError, e:
      print e.args
      return
    types = json.loads( response.read( ))
    for t in types:
      self.types[int(t)] = types[t]

  def cmd_ls( self ):
    sources = self.get( )
    if sources:
      count = sources["iTotalDisplayRecords"]
      for i in range( count ):
        source = sources["aaData"][i][0]
        source_id = sources["aaData"][i][1]
        source_type = sources["aaData"][i][2]

        sys.stdout.write( cf.bold_white( source ))
        sys.stdout.write( " " * ( 30 - len( source )))
        if self.types.has_key( source_type ):
          sys.stdout.write( self.types[source_type] )
        else:
          sys.stdout.write( "Unknown (%d)"%source_type )
        sys.stdout.write( "\n" )

  def cmd_delete( self, item, args, rawline ):
    """source||delete source"""
    print "not implemented"

  def cmd_add( self, item, args, rawline ):
    """source||add source"""
    print "not implemented"


class Source( ):
  def __init__( self, cli, source ):
    self.category = "source"
    self.cli = cli
    self.source_id = source[1]

    self.transponders = Transponders( cli, source )
    self.services = Services( cli, source )

  def update( self ):
    self.path_items = { "transponders": self.transponders,
                        "services":     self.services }

class Transponders( ):
  def __init__( self, cli, source ):
    self.category = "transponders"
    self.cli = cli
    self.source_id = source[1]

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

    self.path_items = { }

  def get( self ):
    req = urllib2.Request('http://localhost:7777/tvd?c=transponder&a=list&source=%d'%self.source_id )
    try:
      response = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
      print e.code
      return None
    except urllib2.URLError, e:
      print e.args
      return None
    return json.loads( response.read( ))

  def cmd_ls( self ):
    transponders = self.get( )
    if not transponders:
      return
    count = transponders["iTotalDisplayRecords"]
    for i in range( count ):
      transponder = transponders["aaData"][i][0]
      transponder_id = transponders["aaData"][i][1]

      sys.stdout.write( cf.bold_white( transponder ))
      sys.stdout.write( "\n" )
    print "total: %d"%count

  def cmd_delete( self, item, args, rawline ):
    """transponder||delete transponder"""
    print "delete"

class Services( ):
  def __init__( self, cli, source ):
    self.category = "services"
    self.cli = cli
    self.source_id = source[1]

    self.cli.RegisterItem( CLIItem( "delete", self.cmd_delete, category = self.category ))

  def get( self ):
    req = urllib2.Request( 'http://localhost:7777/tvd?c=services&a=list&source=%d'%self.source_id )
    try:
      response = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
      print e.code
      return None
    except urllib2.URLError, e:
      print e.args
      return None
    return json.loads( response.read( ))

  def cmd_ls( self ):
    transponders = self.get( )
    if not transponders:
      return
    count = transponders["iTotalDisplayRecords"]
    for i in range( count ):
      transponder = transponders["aaData"][i][0]
      transponder_id = transponders["aaData"][i][1]

      sys.stdout.write( cf.bold_white( transponder ))
      sys.stdout.write( "\n" )
    print "total: %d"%count

  def cmd_delete( self, item, args, rawline ):
    """service||delete transponder"""
    print "delete"

class TVDCLI( CLI ):
  def __init__( self ):
    CLI.__init__( self, "~/.tvdaemon/history" )
    self.confirm_exit = False
    self.SetWelcomeText( "TVDaemon - Command Line Interface" )
    self.SetPrompt( "TVD:%s> " )

    self.cd = self.GetItemByName( "cd" )
    self.root = Root( self )
    self.SetItemsEnabled( False )
    self.relocate( )

  def relocate( self ):
    loc = self._location.GetCurrentLocationValue( )
    if not loc:
      loc = self.root
    cat = "root"
    if hasattr( loc, "category" ):
      cat = loc.category
    if hasattr( loc, "update" ):
      loc.update( )
    self.cd.ClearItems( )
    if hasattr( loc, "path_items" ):
      for path in loc.path_items:
        self.cd.AppendItem( CLIItem( path, value = loc.path_items[path], tab_delimiter = "/" ))
        self.SetItemsEnabledByCategories( cat, other_inverse = True )
        self._UpdateHelpItem( )
    else:
      print "object has no path items:", loc

  def cmd_cd( self, item, args, rawline ):
    """[location|..]||change current location"""
    index = self._location.GetHierarchyIndex( )
    args = args.strip( )
    changed = False
    if args == "":
      self._location.GoToRoot( )
      changed = True
    elif args == "-":
      self._location.GoToLastLocation( )
      changed = True
    elif args[0] == "/":
      self._location.GoToRoot( )
      changed = True

    if changed:
      self.relocate( )

    paths = [s for s in args.split( self._location.Delimiter ) if s != ""]
    for path in paths:
      if path == "..":
        self._location.GoOneBack( )
        self.relocate( )
      elif path == ".":
        continue
      else:
        #index = self._location.GetHierarchyIndex( )
        loc = self._location.GetCurrentLocationValue( )
        if not loc:
          loc = self.root

        if hasattr( loc, "path_items" ):
          if path in loc.path_items:
            self._location.AppendLocation( path, loc.path_items[path] )
            self.relocate( )
          else:
            print "not such directory"
        else:
          print "object has no path_items"

  def cmd_ls( self, item, args = "", line = "" ):
    loc = self._location.GetCurrentLocationValue( )
    if not loc:
      loc = self.root
    if hasattr( loc, "cmd_ls" ):
      loc.cmd_ls( )
    elif hasattr( loc, "path_items" ):
      for path in loc.path_items:
        print "%s/"%path

if __name__ == "__main__":
  test = TVDCLI( )
  test.Start( )
  test.Stop( )

